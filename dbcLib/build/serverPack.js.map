{"version":3,"file":"serverPack.js","mappings":";;;;;;;AAAa;AACb;AACA;AACA,kCAAkC;AAClC;AACA,8CAA8C;AAC9C;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8CAA6C,EAAE,aAAa,EAAC;AAC7D,oBAAoB,GAAG,iBAAiB;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB;;;;;;;;;ACnCP;AACb;AACA;AACA,kCAAkC;AAClC;AACA,8CAA8C;AAC9C;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8CAA6C,EAAE,aAAa,EAAC;AAC7D,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;;;;;;;;;AC1Ca;AACb;AACA;AACA,kCAAkC;AAClC;AACA,8CAA8C;AAC9C;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8CAA6C,EAAE,aAAa,EAAC;AAC7D,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;;;;;;;;;AC1BC;AACb;AACA;AACA,kCAAkC;AAClC;AACA,8CAA8C;AAC9C;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8CAA6C,EAAE,aAAa,EAAC;AAC7D,gBAAgB;AAChB;AACA;AACA;AACA;AACA,CAAC,sCAAsC;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;;;;;;;;;ACzEH;AACb;AACA;AACA,kCAAkC;AAClC;AACA,8CAA8C;AAC9C;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8CAA6C,EAAE,aAAa,EAAC;AAC7D,2BAA2B;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B;AAC3B;AACA;AACA;AACA;AACA;AACA,2BAA2B;;;;;;;;;ACnCd;AACb;AACA;AACA,kCAAkC;AAClC;AACA,8CAA8C;AAC9C;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8CAA6C,EAAE,aAAa,EAAC;AAC7D,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,KAAK,GAAG,IAAI,IAAI,UAAU;AAC9C;AACA;AACA,eAAe;;;;;;;;;ACzCF;AACb;AACA;AACA,kCAAkC;AAClC;AACA,8CAA8C;AAC9C;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8CAA6C,EAAE,aAAa,EAAC;AAC7D,mBAAmB,GAAG,kBAAkB,GAAG,cAAc;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;;;;;;;;;ACjEN;AACb;AACA;AACA,kCAAkC;AAClC;AACA,8CAA8C;AAC9C;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8CAA6C,EAAE,aAAa,EAAC;AAC7D,iBAAiB,GAAG,gBAAgB;AACpC;AACA;AACA;AACA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oD,wCAAwC;AAC5F,qDAAqD,wCAAwC;AAC7F,iDAAiD,wCAAwC;AACzF,gEAAgE,wCAAwC;AACxG,uDAAuD,wCAAwC;AAC/F,oDAAoD,wCAAwC;AAC5F,sDAAsD,wCAAwC;AAC9F;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAiD,wCAAwC;AACzF,mDAAmD,wCAAwC;AAC3F,iDAAiD,wCAAwC;AACzF,aAAa;AACb,2CAA2C,wCAAwC;AACnF;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,oDAAoD,wCAAwC;AAC5F;AACA;AACA,gDAAgD,wCAAwC;AACxF,+CAA+C,wCAAwC,8BAA8B,wCAAwC;AAC7J,SAAS;AACT;AACA,KAAK;AACL,CAAC;AACD;AACA;AACA,yCAAyC,wCAAwC;AACjF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8CAA8C,wCAAwC;AACtF;AACA;AACA,gBAAgB;;;;;;;;;;AC7bhB;AACA;AACA;AACA,CAAC;AACD,IAAI,KAA4D;AAChE;AACA,UAAU,CAeE;AACZ,CAAC;AACD;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD,iCAAiC,EAAE,oBAAoB,EAAE,sBAAsB,EAAE;AACjF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,eAAe;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,QAAQ;AACnB,aAAa,QAAQ;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC,OAAO;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,SAAS;AACpB,aAAa,QAAQ;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,QAAQ;AACnB,aAAa,QAAQ;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,SAAS;AACpB,aAAa,QAAQ;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,QAAQ;AACrB;AACA;AACA;AACA;AACA;AACA,+DAA+D,EAAE,wBAAwB,EAAE;AAC3F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,QAAQ;AACnB,aAAa,QAAQ;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,eAAe;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,QAAQ;AACnB,aAAa,QAAQ;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,QAAQ;AACnB,aAAa,QAAQ;AACrB;AACA;AACA;AACA;AACA,WAAW,QAAQ;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,sBAAsB;AAC3D,0CAA0C,+BAA+B;AACzE,sCAAsC,4BAA4B;AAClE,sCAAsC,4BAA4B;AAClE,uCAAuC,4BAA4B;AACnE;AACA;AACA;AACA;AACA;AACA;AACA,0CAA0C,uCAAuC;AACjF,sCAAsC,oCAAoC;AAC1E,sCAAsC,oCAAoC;AAC1E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,wCAAwC;AACxC;AACA;AACA;AACA,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC1TD;AACO;AACP;AACA;AACO;AACP;AACA,qBAAqB;AACrB;AACA;AACA;AACO;AACP;AACA,qBAAqB;AACrB;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;;AC1BuC;AACvC;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP,MAAM,UAAU;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP,MAAM,UAAU;AAChB;AACA;AACA;AACO;AACP;AACA;AACA;AACA;;AC7JA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACkB;AACnB;;ACXA,iBAAiB,SAAI,IAAI,SAAI;AAC7B;AACA;AACA,eAAe,gBAAgB,sCAAsC,kBAAkB;AACvF,8BAA8B;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB;AACxB;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,CAAC;AACsB;AACvB;;AChCA;AACgD;AACK;AAC9C;AACP,2CAA2C;AAC3C,2CAA2C;AACpC;AACP;AACA;AACA;AACA;AACA,gCAAgC;AAChC;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B;AAC5B;AACA;AACA;AACA,QAAQ,QAAQ;AAChB;AACA;AACA;AACO;AACP;AACA;AACA;AACA,oBAAoB,YAAY;AAChC;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA,gCAAgC;AAChC;AACA;AACA,qBAAqB;AACrB;AACA;AACA,gCAAgC;AAChC;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,gCAAgC;AAChC,sBAAsB,QAAQ;AAC9B;AACA,qBAAqB;AACrB;AACA;AACA,sBAAsB,WAAW;AACjC;AACA;AACO;AACP;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;;AChGA;AACwC;AACa;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,kBAAkB;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,iCAAiC;AACzD;AACA;AACA;AACA;AACA;AACA,+BAA+B,OAAO;AACtC;AACA;AACA;AACA;AACA,wBAAwB,0BAA0B;AAClD;AACA;AACA;AACA;AACA;AACA,+BAA+B,OAAO;AACtC;AACA;AACA;AACA,8BAA8B,OAAO;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,OAAO;AAC9B;AACA;AACA;AACA;AACA,CAAC;AACyB;AAC1B;;ACtEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;;ACtBiG;AAC3C;AACA;AACK;AACpD;AACA;AACP;AACA;AACA,yCAAyC,iBAAiB,2BAA2B;AACrF,kCAAkC;AAClC,mCAAmC;AACnC,4CAA4C;AAC5C,mCAAmC;AACnC,uCAAuC;AACvC,0CAA0C;AAC1C,8CAA8C;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,sBAAsB;AAC9C,6BAA6B,SAAS;AACtC;AACA;AACA,YAAY,YAAY;AACxB;AACA;AACA;AACA,6BAA6B,SAAS;AACtC;AACA;AACA,YAAY,YAAY;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,gBAAgB;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4CAA4C,sBAAsB;AAClE;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC,oBAAoB;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC,oBAAojB;AACA;AACA;AACA;AACA,QAAQ,QAAQ;AAChB;AACA;AACA;AACA,CAAC;AACkB;AACnB;;ACtZwC;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP,8BAA8B;AAC9B,sBAAsB,OAAO;AAC7B;AACA;AACA;;ACbO;AACP;AACA;AACA;;ACHgD;AAChD;AACA;AACA;AACA;AACA,uCAAuC;AACvC,0CAA0C;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,uBAAuB;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0DAA0D,uBAAuB;AACjF;AACA;AACA,4BAA4B,gBAAgB;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,YAAY;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AAC2B;AAC5B;;AC/DA,iBAAiB,SAAI,IAAI,SAAI;AAC7B,4BAA4B,+DAA+D,iBAAiB;AAC5G;AACA,oCAAoC,MAAM,+BAA+B,YAAY;AACrF,mCAAmC,MAAM,mCAAmC,YAAY;AACxF,gCAAgC;AAChC;AACA,KAAK;AACL;AACA,mBAAmB,SAAI,IAAI,SAAI;AAC/B,cAAc,6BAA6B,0BAA0B,cAAc,qBAAqB;AACxG,iBAAiB,oDAAoD,qEAAqE,cAAc;AACxJ,uBAAuB,sBAAsB;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC;AACxC,mCAAmC,SAAS;AAC5C,mCAAmC,WAAW,UAAU;AACxD,0CAA0C,cAAc;AACxD;AACA,8GAA8G,OAAO;AACrH,iFAAiF,iBAAiB;AAClG,yDAAyD,gBAAgB,QAAQ;AACjF,+CAA+C,gBAAgB,gBAAgB;AAC/E;AACA,kCAAkC;AAClC;AACA;AACA,UAAU,YAAY,aAAa,SAAS,UAAU;AACtD,oCAAoC,SAAS;AAC7C;AACA;AACA,qBAAqB,SAAI,IAAI,SAAI;AACjC;AACA;AACA,2GAA2G,uFAAuF,cAAc;AAChN,uBAAuB,8BAA8B,gDAAgD,wDAAwD;AAC7J,6CAA6C,sCAAsC,UAAU,mBAAmB,IAAI;AACpH;AACA,eAAe,SAAI,IAAI,SAAI,4BAA4B;AACvD,wBAAwB,SAAI,IAAI,SAAI;AACpC;AACA;AACA,iBAAiB,uFAAuF,cAAc;AACtH,uBAAuB,gCAAgC,qCAAqC,2CAA2C;AACvI,4BAA4B,MAAM,iBAAiB,YAAY;AAC/D,uBAAuB;AACvB,8BAA8B;AAC9B,6BAA6B;AAC7B,4BAA4B;AAC5B;AACoD;AACE;AACY;AACoB;AACX;AACjB;AACV;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA,iCAAiC,gBAAgB;AACjD;AACA;AACA,yCAAyC,iBAAiB,2BAA2B;AACrF,kCAAkC;AAClC,uCAAuC,eAAe,UAAU;AAChE,uCAAuC,eAAe,UAAU;AAChE,yCAAyC,iBAAiB,UAAU;AACpE,uCAAuC,eAAe,UAAU;AAChE,uCAAuC,eAAe,UAAU;AAChE,qCAAqC;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,gBAAgB;AACrC,oBAAoB,cAAc;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,gBAAgB;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+EAA+E,UAAU;AACzF;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,KAAK,EAAE,EAAwB;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACbkCAAkC,WAAW;AAC7C;AACA;AACA,kCAAkC,WAAW;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,WAAW,oCAAoC,UAAU;AACvF;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,WAAW;AACjC;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB,SAAS;AACT;AACA;AACA;AACA,sBAAsB,WAAW;AACjC;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,sBAAsB,WAAW;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,sBAAsB;AACpD,qBAAqB,YAAY;AACjC;AACA;AACA,qBAAqB,YAAY;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,WAAW;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,WAAW;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;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","sources":["webpack://dbclib/./dist/dbc/attributes.js","webpack://dbclib/./dist/dbc/db.js","webpack://dbclib/./dist/dbc/dbcNode.js","webpack://dbclib/./dist/dbc/errors.js","webpack://dbclib/./dist/dbc/ev.js","webpack://dbclib/./dist/dbc/message.js","webpack://dbclib/./dist/dbc/signal.js","webpack://dbclib/./dist/dbc/valtable.js","webpack://dbclib/./dist/mapTools.js","webpack://dbclib/./node_modules/js-base64/base64.js","webpack://dbclib/./node_modules/@msgpack/msgpack/dist.es5+esm/utils/int.mjs","webpack://dbclib/./node_modules/@msgpack/msgpack/dist.es5+esm/utils/utf8.mjs","webpack://dbclib/./node_modules/@msgpack/msgpack/dist.es5+esm/ExtData.mjs","webpack://dbclib/./node_modules/@msgpack/msgpack/dist.es5+esm/DecodeError.mjs","webpack://dbclib/./node_modules/@msgpack/msgpack/dist.es5+esm/timestamp.mjs","webpack://dbclib/./node_modules/@msgpack/msgpack/dist.es5+esm/ExtensionCodec.mjs","webpack://dbclib/./node_modules/@msgpack/msgpack/dist.es5+esm/utils/typedArrays.mjs","webpack://dbclib/./node_modules/@msgpack/msgpack/dist.es5+esm/Encoder.mjs","webpack://dbclib/./node_modules/@msgpack/msgpack/dist.es5+esm/encode.mjs","webpack://dbclib/./node_modules/@msgpack/msgpack/dist.es5+esm/utils/prettyByte.mjs","webpack://dbclib/./node_modules/@msgpack/msgpack/dist.es5+esm/CachedKeyDecoder.mjs","webpack://dbclib/./node_modules/@msgpack/msgpack/dist.es5+esm/Decoder.mjs","webpack://dbclib/./node_modules/@msgpack/msgpack/dist.es5+esm/decode.mjs","webpack://dbclib/./node_modules/@msgpack/msgpack/dist.es5+esm/utils/stream.mjs","webpack://dbclib/./node_modules/@msgpack/msgpack/dist.es5+esm/decodeAsync.mjs","webpack://dbclib/./node_modules/@msgpack/msgpack/dist.es5+esm/index.mjs","webpack://dbclib/webpack/bootstrap","webpack://dbclib/webpack/runtime/define property getters","webpack://dbclib/webpack/runtime/hasOwnProperty shorthand","webpack://dbclib/webpack/runtime/make namespace object","webpack://dbclib/./dist/index.js"],"sourcesContent":["\"use strict\";\n/**\n * Copyright (C) 2021 Landon Harris\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License as\n * published by the Free Software Foundation; version 2.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program. If not, see\n * <https://www.gnu.org/licenses/old-licenses/gpl-2.0-standalone.html>.\n*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.AttributeDef = exports.Attribute = void 0;\nclass Attribute {\n    constructor(name, objectType, value) {\n        this.name = name;\n        this.type = objectType;\n        this.value = value;\n        this.clsType = \"attribute\";\n    }\n}\nexports.Attribute = Attribute;\nclass AttributeDef {\n    constructor(name, objType, valType) {\n        this.name = name;\n        this.objType = objType;\n        this.valType = valType;\n        this.clsType = \"attributeDef\";\n    }\n}\nexports.AttributeDef = AttributeDef;\n","\"use strict\";\n/**\n * Copyright (C) 2021 Landon Harris\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License as\n * published by the Free Software Foundation; version 2.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program. If not, see\n * <https://www.gnu.org/licenses/old-licenses/gpl-2.0-standalone.html>.\n*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Database = void 0;\n;\nclass Database {\n    constructor() {\n        this.messages = new Map();\n        this.valTables = new Map();\n        this.version = \"\";\n        this.symbols = [];\n        this.parseErrors = [];\n        this.bitTiming = {\n            baudRate: -1,\n            register_1: -1,\n            register_2: -1\n        };\n        this.nodes = new Map();\n        this.environmentVariables = new Map();\n        this.signalTypes = new Map();\n        this.comment = \"\";\n        this.attrDefs = new Map();\n        this.attributes = new Map();\n        this.fileName = \"\";\n        this.type = \"database\";\n    }\n}\nexports.Database = Database;\nDatabase.identifier = \"Database\";\n","\"use strict\";\n/**\n * Copyright (C) 2021 Landon Harris\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License as\n * published by the Free Software Foundation; version 2.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program. If not, see\n * <https://www.gnu.org/licenses/old-licenses/gpl-2.0-standalone.html>.\n*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Node = void 0;\nclass Node {\n    constructor(name) {\n        this.name = name;\n        this.comment = \"\";\n        this.attributes = new Map();\n        this.clsType = \"node\";\n    }\n}\nexports.Node = Node;\n","\"use strict\";\n/**\n * Copyright (C) 2021 Landon Harris\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License as\n * published by the Free Software Foundation; version 2.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program. If not, see\n * <https://www.gnu.org/licenses/old-licenses/gpl-2.0-standalone.html>.\n*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.DBCError = void 0;\nvar conditionType;\n(function (conditionType) {\n    conditionType[conditionType[\"noCondition\"] = 0] = \"noCondition\";\n    conditionType[conditionType[\"mapHas\"] = 1] = \"mapHas\";\n})(conditionType || (conditionType = {}));\nclass DBCError {\n    constructor(whence, what, type, // 0: warning, 1: error\n    token = \"\") {\n        this.whence = whence;\n        this.what = what;\n        this.type = type;\n        this.token = token;\n        this.hasCondition = false;\n        this.condition = conditionType.noCondition;\n        this.mapVal = null;\n        this.key = null;\n    }\n    evalCondition() {\n        // returns false if error needs to be added\n        if (!this.hasCondition)\n            return false;\n        switch (this.condition) {\n            case conditionType.noCondition:\n                return false;\n            case conditionType.mapHas:\n                return this.evalMapCondition();\n            default:\n                break;\n        }\n    }\n    addMapCondition(mapVal, key) {\n        this.mapVal = mapVal;\n        this.key = key;\n        this.condition = conditionType.mapHas;\n        this.hasCondition = true;\n    }\n    evalMapCondition() {\n        if (this.mapVal === null || this.key === null)\n            // no condition set. unconditional error, so always add\n            return false;\n        else if (this.mapVal === undefined)\n            // map doest exist so there's no way the key is in it. \n            return false;\n        else {\n            // console.log(\"checking map condition\", this.mapVal, this.key, this.mapVal.has(this.key));\n            if (this.mapVal.has(this.key))\n                return true;\n            else\n                return false;\n        }\n    }\n    isMapCondition() {\n        return this.condition == conditionType.mapHas;\n    }\n}\nexports.DBCError = DBCError;\n","\"use strict\";\n/**\n * Copyright (C) 2021 Landon Harris\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License as\n * published by the Free Software Foundation; version 2.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program. If not, see\n * <https://www.gnu.org/licenses/old-licenses/gpl-2.0-standalone.html>.\n*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.EnvironmentVariable = void 0;\nclass EnvironmentVariable {\n    constructor() {\n        this.name = \"\";\n        this.type = 2;\n        this.min = -1;\n        this.max = 0;\n        this.unit = \"\";\n        this.initialVal = 0;\n        this.id = 0;\n        this.transmitters = [];\n        this.valueDescriptions = new Map();\n        this.dataSize = 0; // used when ENVVAR_DATA is present\n        this.comment = \"\";\n        this.attributes = new Map();\n        this.clsType = \"environmentVariable\";\n    }\n}\nexports.EnvironmentVariable = EnvironmentVariable;\n","\"use strict\";\n/**\n * Copyright (C) 2021 Landon Harris\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License as\n * published by the Free Software Foundation; version 2.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program. If not, see\n * <https://www.gnu.org/licenses/old-licenses/gpl-2.0-standalone.html>.\n*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Message = void 0;\nclass Message {\n    constructor(endLineNum, Id, Name, Size, Transmitter, Signals) {\n        this.id = Id;\n        this.name = Name;\n        this.size = Size;\n        this.transmitter = Transmitter;\n        this.signals = Signals;\n        this.comment = \"\";\n        this.transmitters = [];\n        this.signalGroups = new Map();\n        this.attributes = new Map();\n        this.endNum = endLineNum;\n        this.clsType = \"message\";\n    }\n    get lineNum() {\n        return this.endNum - this.signals.size;\n    }\n    represent() {\n        var hex = this.id.toString(16).padStart(3, \"000\").toUpperCase();\n        var dec = this.id.toString(10).padStart(4, \"0000\");\n        return `0x${hex} (${dec}) ${this.name}`;\n    }\n}\nexports.Message = Message;\n","\"use strict\";\n/**\n * Copyright (C) 2021 Landon Harris\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License as\n * published by the Free Software Foundation; version 2.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program. If not, see\n * <https://www.gnu.org/licenses/old-licenses/gpl-2.0-standalone.html>.\n*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.SignalGroup = exports.SignalType = exports.Signal = void 0;\nclass Signal {\n    constructor(lineNo, Name, Start, Size, Order, Type, Factor, Offset, Min, Max, Unit, Receivers) {\n        this.name = Name;\n        this.startBit = Start;\n        this.bitSize = Size;\n        this.byteOrder = Order;\n        this.valueType = Type;\n        this.factor = Factor;\n        this.offset = Offset;\n        this.minimum = Min;\n        this.maximum = Max;\n        this.unit = Unit;\n        this.receivers = Receivers;\n        this.valTable = null;\n        this.comment = \"\";\n        this.attributes = new Map();\n        this.lineNum = lineNo;\n        this.clsType = \"signal\";\n    }\n}\nexports.Signal = Signal;\nclass SignalType {\n    constructor(name, size, byteOrder, valueType, factor, offset, min, max, unit, defaultVal, valTable) {\n        this.name = name;\n        this.size = size;\n        this.byteOrder = byteOrder;\n        this.valueType = valueType;\n        this.factor = factor;\n        this.offset = offset;\n        this.minimum = min;\n        this.maximum = max;\n        this.unit = unit;\n        this.default = defaultVal;\n        this.valTable = valTable;\n        this.clsType = \"signalType\";\n    }\n}\nexports.SignalType = SignalType;\nclass SignalGroup {\n    constructor() {\n        this.messageId = 0;\n        this.name = \"\";\n        this.repetitions = 0;\n        this.signals = [];\n        this.clsType = \"signalGroup\";\n    }\n}\nexports.SignalGroup = SignalGroup;\n","\"use strict\";\n/**\n * Copyright (C) 2021 Landon Harris\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License as\n * published by the Free Software Foundation; version 2.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program. If not, see\n * <https://www.gnu.org/licenses/old-licenses/gpl-2.0-standalone.html>.\n*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ValueType = exports.ValTable = void 0;\nclass ValTable {\n    constructor(name) {\n        this.name = name;\n        this.descriptions = new Map();\n        this.clsType = \"valTable\";\n    }\n}\nexports.ValTable = ValTable;\nclass ValueType {\n    constructor(type) {\n        this.type = type;\n        this.min = 0;\n        this.max = 0;\n        this.enumVals = [];\n    }\n}\nexports.ValueType = ValueType;\n","\"use strict\";\n/**\n * Copyright (C) 2022 Landon Harris\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License as\n * published by the Free Software Foundation; version 2.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program. If not, see\n * <https://www.gnu.org/licenses/old-licenses/gpl-2.0-standalone.html>.\n*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.decodeDb = exports.encodeDb = exports.extensionCodec = void 0;\nconst msgpack_1 = require(\"@msgpack/msgpack\");\nconst db_1 = require(\"./dbc/db\");\nconst message_1 = require(\"./dbc/message\");\nconst dbcNode_1 = require(\"./dbc/dbcNode\");\nconst valtable_1 = require(\"./dbc/valtable\");\nconst attributes_1 = require(\"./dbc/attributes\");\nconst ev_1 = require(\"./dbc/ev\");\nconst signal_1 = require(\"./dbc/signal\");\nconst b64 = require(\"js-base64\");\n// DBCError elided\nexports.extensionCodec = new msgpack_1.ExtensionCodec();\n// Attribute\nexports.extensionCodec.register({\n    type: 2,\n    encode: (input) => {\n        if ((input === null || input === void 0 ? void 0 : input.clsType) == \"attribute\") {\n            let object = input;\n            var name = msgpack_1.encode(object.name, { extensionCodec: exports.extensionCodec });\n            var type = msgpack_1.encode(object.type, { extensionCodec: exports.extensionCodec });\n            var value = msgpack_1.encode(object.value, { extensionCodec: exports.extensionCodec });\n            return msgpack_1.encode([name, type, value], { extensionCodec: exports.extensionCodec });\n        }\n        else {\n            return null;\n        }\n    },\n    decode: (data) => {\n        const array = msgpack_1.decode(data, { extensionCodec: exports.extensionCodec });\n        return new attributes_1.Attribute(msgpack_1.decode(array[0], { extensionCodec: exports.extensionCodec }), msgpack_1.decode(array[1], { extensionCodec: exports.extensionCodec }), msgpack_1.decode(array[2], { extensionCodec: exports.extensionCodec }));\n    }\n});\n// AttributeDef\nexports.extensionCodec.register({\n    type: 3,\n    encode: (input) => {\n        if ((input === null || input === void 0 ? void 0 : input.clsType) == \"attributeDef\") {\n            let object = input;\n            var name = msgpack_1.encode(object.name, { extensionCodec: exports.extensionCodec });\n            var type = msgpack_1.encode(object.objType, { extensionCodec: exports.extensionCodec });\n            var value = msgpack_1.encode(object.valType, { extensionCodec: exports.extensionCodec });\n            return msgpack_1.encode([name, type, value], { extensionCodec: exports.extensionCodec });\n        }\n        else\n            return null;\n    },\n    decode: (data) => {\n        const array = msgpack_1.decode(data, { extensionCodec: exports.extensionCodec });\n        return new attributes_1.AttributeDef(msgpack_1.decode(array[0], { extensionCodec: exports.extensionCodec }), msgpack_1.decode(array[1], { extensionCodec: exports.extensionCodec }), msgpack_1.decode(array[2], { extensionCodec: exports.extensionCodec }));\n    }\n});\n// Node\nexports.extensionCodec.register({\n    type: 4,\n    encode: (input) => {\n        if ((input === null || input === void 0 ? void 0 : input.clsType) == \"node\") {\n            let object = input;\n            var name = msgpack_1.encode(object.name, { extensionCodec: exports.extensionCodec });\n            var comment = msgpack_1.encode(object.comment, { extensionCodec: exports.extensionCodec });\n            var attributes = msgpack_1.encode(object.attributes, { extensionCodec: exports.extensionCodec });\n            return msgpack_1.encode([name, comment, attributes], { extensionCodec: exports.extensionCodec });\n        }\n        else\n            return null;\n    },\n    decode: (data) => {\n        const array = msgpack_1.decode(data, { extensionCodec: exports.extensionCodec });\n        var ret = new dbcNode_1.Node(msgpack_1.decode(array[0], { extensionCodec: exports.extensionCodec }));\n        ret.comment = msgpack_1.decode(array[1], { extensionCodec: exports.extensionCodec });\n        ret.attributes = msgpack_1.decode(array[2], { extensionCodec: exports.extensionCodec });\n        return ret;\n    }\n});\n// Environment Variable\nexports.extensionCodec.register({\n    type: 5,\n    encode: (input) => {\n        if ((input === null || input === void 0 ? void 0 : input.clsType) == \"environmentVariable\") {\n            let object = input;\n            var name = msgpack_1.encode(object.name, { extensionCodec: exports.extensionCodec });\n            var type = msgpack_1.encode(object.type, { extensionCodec: exports.extensionCodec });\n            var min = msgpack_1.encode(object.min, { extensionCodec: exports.extensionCodec });\n            var max = msgpack_1.encode(object.max, { extensionCodec: exports.extensionCodec });\n            var unit = msgpack_1.encode(object.unit, { extensionCodec: exports.extensionCodec });\n            var initialVal = msgpack_1.encode(object.initialVal, { extensionCodec: exports.extensionCodec });\n            var id = msgpack_1.encode(object.id, { extensionCodec: exports.extensionCodec });\n            var transmitters = msgpack_1.encode(object.transmitters, { extensionCodec: exports.extensionCodec });\n            var valueDescriptions = msgpack_1.encode(object.valueDescriptions, { extensionCodec: exports.extensionCodec });\n            var dataSize = msgpack_1.encode(object.dataSize, { extensionCodec: exports.extensionCodec });\n            var comment = msgpack_1.encode(object.comment, { extensionCodec: exports.extensionCodec });\n            var attributes = msgpack_1.encode(object.attributes, { extensionCodec: exports.extensionCodec });\n            return (msgpack_1.encode([name, type, min, max, unit, initialVal, id, transmitters, valueDescriptions, dataSize, comment, attributes]));\n        }\n        else\n            return null;\n    },\n    decode: (data) => {\n        const array = msgpack_1.decode(data, { extensionCodec: exports.extensionCodec });\n        var ret = new ev_1.EnvironmentVariable();\n        ret.name = msgpack_1.decode(array[0], { extensionCodec: exports.extensionCodec });\n        ret.type = msgpack_1.decode(array[1], { extensionCodec: exports.extensionCodec });\n        ret.min = msgpack_1.decode(array[2], { extensionCodec: exports.extensionCodec });\n        ret.max = msgpack_1.decode(array[3], { extensionCodec: exports.extensionCodec });\n        ret.unit = msgpack_1.decode(array[4], { extensionCodec: exports.extensionCodec });\n        ret.initialVal = msgpack_1.decode(array[5], { extensionCodec: exports.extensionCodec });\n        ret.id = msgpack_1.decode(array[6], { extensionCodec: exports.extensionCodec });\n        ret.transmitters = msgpack_1.decode(array[7], { extensionCodec: exports.extensionCodec });\n        ret.dataSize = msgpack_1.decode(array[8], { extensionCodec: exports.extensionCodec });\n        ret.comment = msgpack_1.decode(array[9], { extensionCodec: exports.extensionCodec });\n        ret.attributes = msgpack_1.decode(array[10], { extensionCodec: exports.extensionCodec });\n        return ret;\n    }\n});\n// message\nexports.extensionCodec.register({\n    type: 6,\n    encode: (input) => {\n        if ((input === null || input === void 0 ? void 0 : input.clsType) == \"message\") {\n            let object = input;\n            const id = msgpack_1.encode(object.id, { extensionCodec: exports.extensionCodec });\n            const name = msgpack_1.encode(object.name, { extensionCodec: exports.extensionCodec });\n            const size = msgpack_1.encode(object.size, { extensionCodec: exports.extensionCodec });\n            const transmitter = msgpack_1.encode(object.transmitter, { extensionCodec: exports.extensionCodec });\n            const transmitters = msgpack_1.encode(object.transmitters, { extensionCodec: exports.extensionCodec });\n            const signals = msgpack_1.encode(object.signals, { extensionCodec: exports.extensionCodec });\n            const comment = msgpack_1.encode(object.comment, { extensionCodec: exports.extensionCodec });\n            const signalGroups = msgpack_1.encode(object.signalGroups, { extensionCodec: exports.extensionCodec });\n            const attributes = msgpack_1.encode(object.attributes, { extensionCodec: exports.extensionCodec });\n            return msgpack_1.encode([id, name, size, transmitter, transmitters, signals, comment, signalGroups, attributes], { extensionCodec: exports.extensionCodec });\n        }\n        else\n            return null;\n    },\n    decode: (data) => {\n        const array = msgpack_1.decode(data, { extensionCodec: exports.extensionCodec });\n        var ret = new message_1.Message(0, // endLineNum\n        msgpack_1.decode(array[0], { extensionCodec: exports.extensionCodec }), // id\n        msgpack_1.decode(array[1], { extensionCodec: exports.extensionCodec }), // name\n        msgpack_1.decode(array[2], { extensionCodec: exports.extensionCodec }), // size\n        msgpack_1.decode(array[3], { extensionCodec: exports.extensionCodec }), // transmitter\n        msgpack_1.decode(array[5], { extensionCodec: exports.extensionCodec }) // signals\n        );\n        ret.transmitters = msgpack_1.decode(array[4], { extensionCodec: exports.extensionCodec });\n        ret.comment = msgpack_1.decode(array[6], { extensionCodec: exports.extensionCodec });\n        ret.signalGroups = msgpack_1.decode(array[7], { extensionCodec: exports.extensionCodec });\n        ret.attributes = msgpack_1.decode(array[8], { extensionCodec: exports.extensionCodec });\n        return ret;\n    }\n});\n// signal\nexports.extensionCodec.register({\n    type: 7,\n    encode: (input) => {\n        if ((input === null || input === void 0 ? void 0 : input.clsType) == \"signal\") {\n            let object = input;\n            const name = msgpack_1.encode(object.name, { extensionCodec: exports.extensionCodec });\n            const startBit = msgpack_1.encode(object.startBit, { extensionCodec: exports.extensionCodec });\n            const bitSize = msgpack_1.encode(object.bitSize, { extensionCodec: exports.extensionCodec });\n            const byteOrder = msgpack_1.encode(object.byteOrder, { extensionCodec: exports.extensionCodec });\n            const valueType = msgpack_1.encode(object.valueType, { extensionCodec: exports.extensionCodec });\n            const factor = msgpack_1.encode(object.factor, { extensionCodec: exports.extensionCodec });\n            const offset = msgpack_1.encode(object.offset, { extensionCodec: exports.extensionCodec });\n            const minimum = msgpack_1.encode(object.minimum, { extensionCodec: exports.extensionCodec });\n            const maximum = msgpack_1.encode(object.maximum, { extensionCodec: exports.extensionCodec });\n            const unit = msgpack_1.encode(object.unit, { extensionCodec: exports.extensionCodec });\n            const receivers = msgpack_1.encode(object.receivers, { extensionCodec: exports.extensionCodec });\n            const valTable = msgpack_1.encode(object.valTable, { extensionCodec: exports.extensionCodec });\n            const comment = msgpack_1.encode(object.comment, { extensionCodec: exports.extensionCodec });\n            const attributes = msgpack_1.encode(object.attributes, { extensionCodec: exports.extensionCodec });\n            const lineNum = msgpack_1.encode(object.lineNum, { extensionCodec: exports.extensionCodec });\n            return msgpack_1.encode([\n                name,\n                startBit,\n                bitSize,\n                byteOrder,\n                valueType,\n                factor,\n                offset,\n                minimum,\n                maximum,\n                unit,\n                receivers,\n                valTable,\n                comment,\n                attributes,\n                lineNum\n            ]);\n        }\n        else\n            return null;\n    },\n    decode: (data) => {\n        const array = msgpack_1.decode(data, { extensionCodec: exports.extensionCodec });\n        var ret = new signal_1.Signal(msgpack_1.decode(array[14], { extensionCodec: exports.extensionCodec }), // lineNum\n        msgpack_1.decode(array[0], { extensionCodec: exports.extensionCodec }), // name\n        msgpack_1.decode(array[1], { extensionCodec: exports.extensionCodec }), // start\n        msgpack_1.decode(array[2], { extensionCodec: exports.extensionCodec }), // size\n        msgpack_1.decode(array[3], { extensionCodec: exports.extensionCodec }), // byte order\n        msgpack_1.decode(array[4], { extensionCodec: exports.extensionCodec }), // valtype\n        msgpack_1.decode(array[5], { extensionCodec: exports.extensionCodec }), // factor\n        msgpack_1.decode(array[6], { extensionCodec: exports.extensionCodec }), // offset\n        msgpack_1.decode(array[7], { extensionCodec: exports.extensionCodec }), // min\n        msgpack_1.decode(array[8], { extensionCodec: exports.extensionCodec }), // max\n        msgpack_1.decode(array[9], { extensionCodec: exports.extensionCodec }), // unit\n        msgpack_1.decode(array[10], { extensionCodec: exports.extensionCodec }) // receivers\n        );\n        ret.valTable = msgpack_1.decode(array[11], { extensionCodec: exports.extensionCodec });\n        ret.comment = msgpack_1.decode(array[12], { extensionCodec: exports.extensionCodec });\n        ret.attributes = msgpack_1.decode(array[13], { extensionCodec: exports.extensionCodec });\n        return ret;\n    }\n});\n// signalType\nexports.extensionCodec.register({\n    type: 8,\n    encode: (input) => {\n        if ((input === null || input === void 0 ? void 0 : input.clsType) == \"signalType\") {\n            let object = input;\n            const name = msgpack_1.encode(object.name, { extensionCodec: exports.extensionCodec });\n            const size = msgpack_1.encode(object.size, { extensionCodec: exports.extensionCodec });\n            const byteOrder = msgpack_1.encode(object.byteOrder, { extensionCodec: exports.extensionCodec });\n            const valueType = msgpack_1.encode(object.valueType, { extensionCodec: exports.extensionCodec });\n            const factor = msgpack_1.encode(object.factor, { extensionCodec: exports.extensionCodec });\n            const offset = msgpack_1.encode(object.offset, { extensionCodec: exports.extensionCodec });\n            const minimum = msgpack_1.encode(object.minimum, { extensionCodec: exports.extensionCodec });\n            const maximum = msgpack_1.encode(object.maximum, { extensionCodec: exports.extensionCodec });\n            const unit = msgpack_1.encode(object.unit, { extensionCodec: exports.extensionCodec });\n            const defaultVal = msgpack_1.encode(object.default, { extensionCodec: exports.extensionCodec });\n            const valTable = msgpack_1.encode(object.valTable, { extensionCodec: exports.extensionCodec });\n            return msgpack_1.encode([\n                name,\n                size,\n                byteOrder,\n                valueType,\n                factor,\n                offset,\n                minimum,\n                maximum,\n                unit,\n                defaultVal,\n                valTable\n            ]);\n        }\n        else\n            return null;\n    },\n    decode: (data) => {\n        const array = msgpack_1.decode(data, { extensionCodec: exports.extensionCodec });\n        var ret = new signal_1.SignalType(msgpack_1.decode(array[0], { extensionCodec: exports.extensionCodec }), // name\n        msgpack_1.decode(array[1], { extensionCodec: exports.extensionCodec }), // size\n        msgpack_1.decode(array[2], { extensionCodec: exports.extensionCodec }), // byte order\n        msgpack_1.decode(array[3], { extensionCodec: exports.extensionCodec }), // valtype\n        msgpack_1.decode(array[4], { extensionCodec: exports.extensionCodec }), // factor\n        msgpack_1.decode(array[5], { extensionCodec: exports.extensionCodec }), // offset\n        msgpack_1.decode(array[6], { extensionCodec: exports.extensionCodec }), // min\n        msgpack_1.decode(array[7], { extensionCodec: exports.extensionCodec }), // max\n        msgpack_1.decode(array[8], { extensionCodec: exports.extensionCodec }), // unit\n        msgpack_1.decode(array[9], { extensionCodec: exports.extensionCodec }), // defaultVal\n        msgpack_1.decode(array[10], { extensionCodec: exports.extensionCodec }) // valTable\n        );\n        return ret;\n    }\n});\n// SignalGroup\nexports.extensionCodec.register({\n    type: 9,\n    encode: (input) => {\n        if ((input === null || input === void 0 ? void 0 : input.clsType) == \"signalGroup\") {\n            let object = input;\n            return msgpack_1.encode([\n                msgpack_1.encode(object.messageId, { extensionCodec: exports.extensionCodec }),\n                msgpack_1.encode(object.name, { extensionCodec: exports.extensionCodec }),\n                msgpack_1.encode(object.repetitions, { extensionCodec: exports.extensionCodec }),\n                msgpack_1.encode(object.signals, { extensionCodec: exports.extensionCodec })\n            ]);\n        }\n        else\n            return null;\n    },\n    decode: (data) => {\n        const array = msgpack_1.decode(data, { extensionCodec: exports.extensionCodec });\n        var ret = new signal_1.SignalGroup();\n        ret.messageId = msgpack_1.decode(array[0], { extensionCodec: exports.extensionCodec });\n        ret.name = msgpack_1.decode(array[1], { extensionCodec: exports.extensionCodec });\n        ret.repetitions = msgpack_1.decode(array[2], { extensionCodec: exports.extensionCodec });\n        ret.signals = msgpack_1.decode(array[3], { extensionCodec: exports.extensionCodec });\n        return ret;\n    }\n});\n// ValTable\nexports.extensionCodec.register({\n    type: 10,\n    encode: (input) => {\n        if ((input === null || input === void 0 ? void 0 : input.clsType) == \"valTable\") {\n            let object = input;\n            return msgpack_1.encode([\n                msgpack_1.encode(object.name, { extensionCodec: exports.extensionCodec }),\n                msgpack_1.encode(object.descriptions, { extensionCodec: exports.extensionCodec })\n            ]);\n        }\n        else\n            return null;\n    },\n    decode: (data) => {\n        const array = msgpack_1.decode(data, { extensionCodec: exports.extensionCodec });\n        var ret = new valtable_1.ValTable(msgpack_1.decode(array[0], { extensionCodec: exports.extensionCodec }));\n        ret.descriptions = msgpack_1.decode(array[1], { extensionCodec: exports.extensionCodec });\n        return ret;\n    }\n});\n// ValueType\nexports.extensionCodec.register({\n    type: 11,\n    encode: (input) => {\n        if ((input === null || input === void 0 ? void 0 : input.clsType) == \"valueType\") {\n            let object = input;\n            return msgpack_1.encode([\n                msgpack_1.encode(object.type, { extensionCodec: exports.extensionCodec }),\n                msgpack_1.encode(object.min, { extensionCodec: exports.extensionCodec }),\n                msgpack_1.encode(object.max, { extensionCodec: exports.extensionCodec }),\n                msgpack_1.encode(object.enumVals, { extensionCodec: exports.extensionCodec })\n            ]);\n        }\n        else\n            return null;\n    },\n    decode: (data) => {\n        const array = msgpack_1.decode(data, { extensionCodec: exports.extensionCodec });\n        var ret = new valtable_1.ValueType(msgpack_1.decode(array[0], { extensionCodec: exports.extensionCodec }));\n        ret.min = msgpack_1.decode(array[1], { extensionCodec: exports.extensionCodec });\n        ret.max = msgpack_1.decode(array[2], { extensionCodec: exports.extensionCodec });\n        ret.enumVals = msgpack_1.decode(array[3], { extensionCodec: exports.extensionCodec });\n        return ret;\n    }\n});\n// Database\nexports.extensionCodec.register({\n    type: 1,\n    encode: (input) => {\n        if ((input === null || input === void 0 ? void 0 : input.type) == \"database\") {\n            let object = input;\n            var msgs = msgpack_1.encode(object.messages, { extensionCodec: exports.extensionCodec });\n            var valTables = msgpack_1.encode(object.valTables, { extensionCodec: exports.extensionCodec });\n            var nodes = msgpack_1.encode(object.nodes, { extensionCodec: exports.extensionCodec });\n            var environmentVariables = msgpack_1.encode(object.environmentVariables, { extensionCodec: exports.extensionCodec });\n            var signalTypes = msgpack_1.encode(object.signalTypes, { extensionCodec: exports.extensionCodec });\n            var attrDefs = msgpack_1.encode(object.attrDefs, { extensionCodec: exports.extensionCodec });\n            var attrs = msgpack_1.encode(object.attributes, { extensionCodec: exports.extensionCodec });\n            var version = msgpack_1.encode(object.version, { extensionCodec: exports.extensionCodec });\n            var comment = msgpack_1.encode(object.comment, { extensionCodec: exports.extensionCodec });\n            var filename = msgpack_1.encode(object.fileName, { extensionCodec: exports.extensionCodec });\n            return msgpack_1.encode([version, filename, comment, msgs, valTables, nodes, environmentVariables, signalTypes, attrDefs, attrs], { extensionCodec: exports.extensionCodec });\n        }\n        else {\n            return null;\n        }\n    },\n    decode: (data) => {\n        const array = msgpack_1.decode(data, { extensionCodec: exports.extensionCodec });\n        var ret = new db_1.Database();\n        ret.version = msgpack_1.decode(array[0], { extensionCodec: exports.extensionCodec });\n        ret.fileName = msgpack_1.decode(array[1], { extensionCodec: exports.extensionCodec });\n        ret.comment = msgpack_1.decode(array[2], { extensionCodec: exports.extensionCodec });\n        ret.messages = msgpack_1.decode(array[3], { extensionCodec: exports.extensionCodec });\n        ret.valTables = msgpack_1.decode(array[4], { extensionCodec: exports.extensionCodec });\n        ret.nodes = msgpack_1.decode(array[5], { extensionCodec: exports.extensionCodec });\n        ret.environmentVariables = msgpack_1.decode(array[6], { extensionCodec: exports.extensionCodec });\n        ret.signalTypes = msgpack_1.decode(array[7], { extensionCodec: exports.extensionCodec });\n        ret.attrDefs = msgpack_1.decode(array[8], { extensionCodec: exports.extensionCodec });\n        ret.attributes = msgpack_1.decode(array[9], { extensionCodec: exports.extensionCodec });\n        return ret;\n    }\n});\nexports.extensionCodec.register({\n    type: 0,\n    encode: (object) => {\n        // 1. <for each key,value in the map\n        // 2. encode the key and value\n        // 3. put the key and value in a tmp array\n        // 4. encode the tmp array\n        // 5. push tmp into ret\n        // 6. <go back to step 1>\n        // 7. encode the ret array\n        // 8. return ret\n        if (object instanceof Map) {\n            let ret = [];\n            object.forEach((value, key) => {\n                let tmp = [];\n                tmp.push(msgpack_1.encode(key, { extensionCodec: exports.extensionCodec }));\n                tmp.push(msgpack_1.encode(value, { extensionCodec: exports.extensionCodec }));\n                ret.push(msgpack_1.encode(tmp, { extensionCodec: exports.extensionCodec }));\n            });\n            return msgpack_1.encode(ret, { extensionCodec: exports.extensionCodec });\n        }\n        else {\n            return null;\n        }\n    },\n    decode: (data) => {\n        let decdBigArray = msgpack_1.decode(data, { extensionCodec: exports.extensionCodec });\n        let ret = new Map();\n        decdBigArray.forEach((value) => {\n            let tmp = msgpack_1.decode(value, { extensionCodec: exports.extensionCodec });\n            ret.set(msgpack_1.decode(tmp[0], { extensionCodec: exports.extensionCodec }), msgpack_1.decode(tmp[1], { extensionCodec: exports.extensionCodec }));\n        });\n        return ret;\n    },\n});\nfunction encodeDb(db) {\n    db.parseErrors = [];\n    var encoded = msgpack_1.encode(db, { extensionCodec: exports.extensionCodec });\n    if (encoded.byteLength * 8 / 6 > 0x1fffffe7) {\n        // cannot create string longer than 512Mb\n        console.error(\"String too large!\");\n        return \"OVERLOADED STRING\";\n    }\n    var encoded64 = b64.Base64.fromUint8Array(encoded);\n    return encoded64;\n}\nexports.encodeDb = encodeDb;\nfunction decodeDb(data) {\n    if (data == \"OVERLOADED STRING\") {\n        let ret = new db_1.Database();\n        ret.version = \"Too large for parsing.\";\n        return ret;\n    }\n    var u8array = b64.Base64.toUint8Array(data);\n    var decoded = msgpack_1.decode(u8array, { extensionCodec: exports.extensionCodec });\n    return decoded;\n}\nexports.decodeDb = decodeDb;\n","\n\n//\n// THIS FILE IS AUTOMATICALLY GENERATED! DO NOT EDIT BY HAND!\n//\n;(function(global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined'\n        ? module.exports = factory()\n        : typeof define === 'function' && define.amd\n        ? define(factory) :\n        // cf. https://github.com/dankogai/js-base64/issues/119\n        (function() {\n            // existing version for noConflict()\n            const _Base64 = global.Base64;\n            const gBase64 = factory();\n            gBase64.noConflict = () => {\n                global.Base64 = _Base64;\n                return gBase64;\n            };\n            if (global.Meteor) { // Meteor.js\n                Base64 = gBase64;\n            }\n            global.Base64 = gBase64;\n        })();\n}((typeof self !== 'undefined' ? self\n        : typeof window !== 'undefined' ? window\n        : typeof global !== 'undefined' ? global\n        : this\n), function() {\n    'use strict';\n\n/**\n *  base64.ts\n *\n *  Licensed under the BSD 3-Clause License.\n *    http://opensource.org/licenses/BSD-3-Clause\n *\n *  References:\n *    http://en.wikipedia.org/wiki/Base64\n *\n * @author Dan Kogai (https://github.com/dankogai)\n */\nconst version = '3.6.1';\n/**\n * @deprecated use lowercase `version`.\n */\nconst VERSION = version;\nconst _hasatob = typeof atob === 'function';\nconst _hasbtoa = typeof btoa === 'function';\nconst _hasBuffer = typeof Buffer === 'function';\nconst _TD = typeof TextDecoder === 'function' ? new TextDecoder() : undefined;\nconst _TE = typeof TextEncoder === 'function' ? new TextEncoder() : undefined;\nconst b64ch = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';\nconst b64chs = [...b64ch];\nconst b64tab = ((a) => {\n    let tab = {};\n    a.forEach((c, i) => tab[c] = i);\n    return tab;\n})(b64chs);\nconst b64re = /^(?:[A-Za-z\\d+\\/]{4})*?(?:[A-Za-z\\d+\\/]{2}(?:==)?|[A-Za-z\\d+\\/]{3}=?)?$/;\nconst _fromCC = String.fromCharCode.bind(String);\nconst _U8Afrom = typeof Uint8Array.from === 'function'\n    ? Uint8Array.from.bind(Uint8Array)\n    : (it, fn = (x) => x) => new Uint8Array(Array.prototype.slice.call(it, 0).map(fn));\nconst _mkUriSafe = (src) => src\n    .replace(/[+\\/]/g, (m0) => m0 == '+' ? '-' : '_')\n    .replace(/=+$/m, '');\nconst _tidyB64 = (s) => s.replace(/[^A-Za-z0-9\\+\\/]/g, '');\n/**\n * polyfill version of `btoa`\n */\nconst btoaPolyfill = (bin) => {\n    // console.log('polyfilled');\n    let u32, c0, c1, c2, asc = '';\n    const pad = bin.length % 3;\n    for (let i = 0; i < bin.length;) {\n        if ((c0 = bin.charCodeAt(i++)) > 255 ||\n            (c1 = bin.charCodeAt(i++)) > 255 ||\n            (c2 = bin.charCodeAt(i++)) > 255)\n            throw new TypeError('invalid character found');\n        u32 = (c0 << 16) | (c1 << 8) | c2;\n        asc += b64chs[u32 >> 18 & 63]\n            + b64chs[u32 >> 12 & 63]\n            + b64chs[u32 >> 6 & 63]\n            + b64chs[u32 & 63];\n    }\n    return pad ? asc.slice(0, pad - 3) + \"===\".substring(pad) : asc;\n};\n/**\n * does what `window.btoa` of web browsers do.\n * @param {String} bin binary string\n * @returns {string} Base64-encoded string\n */\nconst _btoa = _hasbtoa ? (bin) => btoa(bin)\n    : _hasBuffer ? (bin) => Buffer.from(bin, 'binary').toString('base64')\n        : btoaPolyfill;\nconst _fromUint8Array = _hasBuffer\n    ? (u8a) => Buffer.from(u8a).toString('base64')\n    : (u8a) => {\n        // cf. https://stackoverflow.com/questions/12710001/how-to-convert-uint8-array-to-base64-encoded-string/12713326#12713326\n        const maxargs = 0x1000;\n        let strs = [];\n        for (let i = 0, l = u8a.length; i < l; i += maxargs) {\n            strs.push(_fromCC.apply(null, u8a.subarray(i, i + maxargs)));\n        }\n        return _btoa(strs.join(''));\n    };\n/**\n * converts a Uint8Array to a Base64 string.\n * @param {boolean} [urlsafe] URL-and-filename-safe a la RFC4648 §5\n * @returns {string} Base64 string\n */\nconst fromUint8Array = (u8a, urlsafe = false) => urlsafe ? _mkUriSafe(_fromUint8Array(u8a)) : _fromUint8Array(u8a);\n// This trick is found broken https://github.com/dankogai/js-base64/issues/130\n// const utob = (src: string) => unescape(encodeURIComponent(src));\n// reverting good old fationed regexp\nconst cb_utob = (c) => {\n    if (c.length < 2) {\n        var cc = c.charCodeAt(0);\n        return cc < 0x80 ? c\n            : cc < 0x800 ? (_fromCC(0xc0 | (cc >>> 6))\n                + _fromCC(0x80 | (cc & 0x3f)))\n                : (_fromCC(0xe0 | ((cc >>> 12) & 0x0f))\n                    + _fromCC(0x80 | ((cc >>> 6) & 0x3f))\n                    + _fromCC(0x80 | (cc & 0x3f)));\n    }\n    else {\n        var cc = 0x10000\n            + (c.charCodeAt(0) - 0xD800) * 0x400\n            + (c.charCodeAt(1) - 0xDC00);\n        return (_fromCC(0xf0 | ((cc >>> 18) & 0x07))\n            + _fromCC(0x80 | ((cc >>> 12) & 0x3f))\n            + _fromCC(0x80 | ((cc >>> 6) & 0x3f))\n            + _fromCC(0x80 | (cc & 0x3f)));\n    }\n};\nconst re_utob = /[\\uD800-\\uDBFF][\\uDC00-\\uDFFFF]|[^\\x00-\\x7F]/g;\n/**\n * @deprecated should have been internal use only.\n * @param {string} src UTF-8 string\n * @returns {string} UTF-16 string\n */\nconst utob = (u) => u.replace(re_utob, cb_utob);\n//\nconst _encode = _hasBuffer\n    ? (s) => Buffer.from(s, 'utf8').toString('base64')\n    : _TE\n        ? (s) => _fromUint8Array(_TE.encode(s))\n        : (s) => _btoa(utob(s));\n/**\n * converts a UTF-8-encoded string to a Base64 string.\n * @param {boolean} [urlsafe] if `true` make the result URL-safe\n * @returns {string} Base64 string\n */\nconst encode = (src, urlsafe = false) => urlsafe\n    ? _mkUriSafe(_encode(src))\n    : _encode(src);\n/**\n * converts a UTF-8-encoded string to URL-safe Base64 RFC4648 §5.\n * @returns {string} Base64 string\n */\nconst encodeURI = (src) => encode(src, true);\n// This trick is found broken https://github.com/dankogai/js-base64/issues/130\n// const btou = (src: string) => decodeURIComponent(escape(src));\n// reverting good old fationed regexp\nconst re_btou = /[\\xC0-\\xDF][\\x80-\\xBF]|[\\xE0-\\xEF][\\x80-\\xBF]{2}|[\\xF0-\\xF7][\\x80-\\xBF]{3}/g;\nconst cb_btou = (cccc) => {\n    switch (cccc.length) {\n        case 4:\n            var cp = ((0x07 & cccc.charCodeAt(0)) << 18)\n                | ((0x3f & cccc.charCodeAt(1)) << 12)\n                | ((0x3f & cccc.charCodeAt(2)) << 6)\n                | (0x3f & cccc.charCodeAt(3)), offset = cp - 0x10000;\n            return (_fromCC((offset >>> 10) + 0xD800)\n                + _fromCC((offset & 0x3FF) + 0xDC00));\n        case 3:\n            return _fromCC(((0x0f & cccc.charCodeAt(0)) << 12)\n                | ((0x3f & cccc.charCodeAt(1)) << 6)\n                | (0x3f & cccc.charCodeAt(2)));\n        default:\n            return _fromCC(((0x1f & cccc.charCodeAt(0)) << 6)\n                | (0x3f & cccc.charCodeAt(1)));\n    }\n};\n/**\n * @deprecated should have been internal use only.\n * @param {string} src UTF-16 string\n * @returns {string} UTF-8 string\n */\nconst btou = (b) => b.replace(re_btou, cb_btou);\n/**\n * polyfill version of `atob`\n */\nconst atobPolyfill = (asc) => {\n    // console.log('polyfilled');\n    asc = asc.replace(/\\s+/g, '');\n    if (!b64re.test(asc))\n        throw new TypeError('malformed base64.');\n    asc += '=='.slice(2 - (asc.length & 3));\n    let u24, bin = '', r1, r2;\n    for (let i = 0; i < asc.length;) {\n        u24 = b64tab[asc.charAt(i++)] << 18\n            | b64tab[asc.charAt(i++)] << 12\n            | (r1 = b64tab[asc.charAt(i++)]) << 6\n            | (r2 = b64tab[asc.charAt(i++)]);\n        bin += r1 === 64 ? _fromCC(u24 >> 16 & 255)\n            : r2 === 64 ? _fromCC(u24 >> 16 & 255, u24 >> 8 & 255)\n                : _fromCC(u24 >> 16 & 255, u24 >> 8 & 255, u24 & 255);\n    }\n    return bin;\n};\n/**\n * does what `window.atob` of web browsers do.\n * @param {String} asc Base64-encoded string\n * @returns {string} binary string\n */\nconst _atob = _hasatob ? (asc) => atob(_tidyB64(asc))\n    : _hasBuffer ? (asc) => Buffer.from(asc, 'base64').toString('binary')\n        : atobPolyfill;\n//\nconst _toUint8Array = _hasBuffer\n    ? (a) => _U8Afrom(Buffer.from(a, 'base64'))\n    : (a) => _U8Afrom(_atob(a), c => c.charCodeAt(0));\n/**\n * converts a Base64 string to a Uint8Array.\n */\nconst toUint8Array = (a) => _toUint8Array(_unURI(a));\n//\nconst _decode = _hasBuffer\n    ? (a) => Buffer.from(a, 'base64').toString('utf8')\n    : _TD\n        ? (a) => _TD.decode(_toUint8Array(a))\n        : (a) => btou(_atob(a));\nconst _unURI = (a) => _tidyB64(a.replace(/[-_]/g, (m0) => m0 == '-' ? '+' : '/'));\n/**\n * converts a Base64 string to a UTF-8 string.\n * @param {String} src Base64 string.  Both normal and URL-safe are supported\n * @returns {string} UTF-8 string\n */\nconst decode = (src) => _decode(_unURI(src));\n/**\n * check if a value is a valid Base64 string\n * @param {String} src a value to check\n  */\nconst isValid = (src) => {\n    if (typeof src !== 'string')\n        return false;\n    const s = src.replace(/\\s+/g, '').replace(/=+$/, '');\n    return !/[^\\s0-9a-zA-Z\\+/]/.test(s) || !/[^\\s0-9a-zA-Z\\-_]/.test(s);\n};\n//\nconst _noEnum = (v) => {\n    return {\n        value: v, enumerable: false, writable: true, configurable: true\n    };\n};\n/**\n * extend String.prototype with relevant methods\n */\nconst extendString = function () {\n    const _add = (name, body) => Object.defineProperty(String.prototype, name, _noEnum(body));\n    _add('fromBase64', function () { return decode(this); });\n    _add('toBase64', function (urlsafe) { return encode(this, urlsafe); });\n    _add('toBase64URI', function () { return encode(this, true); });\n    _add('toBase64URL', function () { return encode(this, true); });\n    _add('toUint8Array', function () { return toUint8Array(this); });\n};\n/**\n * extend Uint8Array.prototype with relevant methods\n */\nconst extendUint8Array = function () {\n    const _add = (name, body) => Object.defineProperty(Uint8Array.prototype, name, _noEnum(body));\n    _add('toBase64', function (urlsafe) { return fromUint8Array(this, urlsafe); });\n    _add('toBase64URI', function () { return fromUint8Array(this, true); });\n    _add('toBase64URL', function () { return fromUint8Array(this, true); });\n};\n/**\n * extend Builtin prototypes with relevant methods\n */\nconst extendBuiltins = () => {\n    extendString();\n    extendUint8Array();\n};\nconst gBase64 = {\n    version: version,\n    VERSION: VERSION,\n    atob: _atob,\n    atobPolyfill: atobPolyfill,\n    btoa: _btoa,\n    btoaPolyfill: btoaPolyfill,\n    fromBase64: decode,\n    toBase64: encode,\n    encode: encode,\n    encodeURI: encodeURI,\n    encodeURL: encodeURI,\n    utob: utob,\n    btou: btou,\n    decode: decode,\n    isValid: isValid,\n    fromUint8Array: fromUint8Array,\n    toUint8Array: toUint8Array,\n    extendString: extendString,\n    extendUint8Array: extendUint8Array,\n    extendBuiltins: extendBuiltins,\n};\n\n    //\n    // export Base64 to the namespace\n    //\n    // ES5 is yet to have Object.assign() that may make transpilers unhappy.\n    // gBase64.Base64 = Object.assign({}, gBase64);\n    gBase64.Base64 = {};\n    Object.keys(gBase64).forEach(k => gBase64.Base64[k] = gBase64[k]);\n    return gBase64;\n}));\n\n\n","// Integer Utility\nexport var UINT32_MAX = 4294967295;\n// DataView extension to handle int64 / uint64,\n// where the actual range is 53-bits integer (a.k.a. safe integer)\nexport function setUint64(view, offset, value) {\n    var high = value / 4294967296;\n    var low = value; // high bits are truncated by DataView\n    view.setUint32(offset, high);\n    view.setUint32(offset + 4, low);\n}\nexport function setInt64(view, offset, value) {\n    var high = Math.floor(value / 4294967296);\n    var low = value; // high bits are truncated by DataView\n    view.setUint32(offset, high);\n    view.setUint32(offset + 4, low);\n}\nexport function getInt64(view, offset) {\n    var high = view.getInt32(offset);\n    var low = view.getUint32(offset + 4);\n    return high * 4294967296 + low;\n}\nexport function getUint64(view, offset) {\n    var high = view.getUint32(offset);\n    var low = view.getUint32(offset + 4);\n    return high * 4294967296 + low;\n}\n//# sourceMappingURL=int.mjs.map","import { UINT32_MAX } from \"./int.mjs\";\nvar TEXT_ENCODING_AVAILABLE = (typeof process === \"undefined\" || process.env[\"TEXT_ENCODING\"] !== \"never\") &&\n    typeof TextEncoder !== \"undefined\" &&\n    typeof TextDecoder !== \"undefined\";\nexport function utf8Count(str) {\n    var strLength = str.length;\n    var byteLength = 0;\n    var pos = 0;\n    while (pos < strLength) {\n        var value = str.charCodeAt(pos++);\n        if ((value & 0xffffff80) === 0) {\n            // 1-byte\n            byteLength++;\n            continue;\n        }\n        else if ((value & 0xfffff800) === 0) {\n            // 2-bytes\n            byteLength += 2;\n        }\n        else {\n            // handle surrogate pair\n            if (value >= 0xd800 && value <= 0xdbff) {\n                // high surrogate\n                if (pos < strLength) {\n                    var extra = str.charCodeAt(pos);\n                    if ((extra & 0xfc00) === 0xdc00) {\n                        ++pos;\n                        value = ((value & 0x3ff) << 10) + (extra & 0x3ff) + 0x10000;\n                    }\n                }\n            }\n            if ((value & 0xffff0000) === 0) {\n                // 3-byte\n                byteLength += 3;\n            }\n            else {\n                // 4-byte\n                byteLength += 4;\n            }\n        }\n    }\n    return byteLength;\n}\nexport function utf8EncodeJs(str, output, outputOffset) {\n    var strLength = str.length;\n    var offset = outputOffset;\n    var pos = 0;\n    while (pos < strLength) {\n        var value = str.charCodeAt(pos++);\n        if ((value & 0xffffff80) === 0) {\n            // 1-byte\n            output[offset++] = value;\n            continue;\n        }\n        else if ((value & 0xfffff800) === 0) {\n            // 2-bytes\n            output[offset++] = ((value >> 6) & 0x1f) | 0xc0;\n        }\n        else {\n            // handle surrogate pair\n            if (value >= 0xd800 && value <= 0xdbff) {\n                // high surrogate\n                if (pos < strLength) {\n                    var extra = str.charCodeAt(pos);\n                    if ((extra & 0xfc00) === 0xdc00) {\n                        ++pos;\n                        value = ((value & 0x3ff) << 10) + (extra & 0x3ff) + 0x10000;\n                    }\n                }\n            }\n            if ((value & 0xffff0000) === 0) {\n                // 3-byte\n                output[offset++] = ((value >> 12) & 0x0f) | 0xe0;\n                output[offset++] = ((value >> 6) & 0x3f) | 0x80;\n            }\n            else {\n                // 4-byte\n                output[offset++] = ((value >> 18) & 0x07) | 0xf0;\n                output[offset++] = ((value >> 12) & 0x3f) | 0x80;\n                output[offset++] = ((value >> 6) & 0x3f) | 0x80;\n            }\n        }\n        output[offset++] = (value & 0x3f) | 0x80;\n    }\n}\nvar sharedTextEncoder = TEXT_ENCODING_AVAILABLE ? new TextEncoder() : undefined;\nexport var TEXT_ENCODER_THRESHOLD = !TEXT_ENCODING_AVAILABLE\n    ? UINT32_MAX\n    : typeof process !== \"undefined\" && process.env[\"TEXT_ENCODING\"] !== \"force\"\n        ? 200\n        : 0;\nfunction utf8EncodeTEencode(str, output, outputOffset) {\n    output.set(sharedTextEncoder.encode(str), outputOffset);\n}\nfunction utf8EncodeTEencodeInto(str, output, outputOffset) {\n    sharedTextEncoder.encodeInto(str, output.subarray(outputOffset));\n}\nexport var utf8EncodeTE = (sharedTextEncoder === null || sharedTextEncoder === void 0 ? void 0 : sharedTextEncoder.encodeInto) ? utf8EncodeTEencodeInto : utf8EncodeTEencode;\nvar CHUNK_SIZE = 4096;\nexport function utf8DecodeJs(bytes, inputOffset, byteLength) {\n    var offset = inputOffset;\n    var end = offset + byteLength;\n    var units = [];\n    var result = \"\";\n    while (offset < end) {\n        var byte1 = bytes[offset++];\n        if ((byte1 & 0x80) === 0) {\n            // 1 byte\n            units.push(byte1);\n        }\n        else if ((byte1 & 0xe0) === 0xc0) {\n            // 2 bytes\n            var byte2 = bytes[offset++] & 0x3f;\n            units.push(((byte1 & 0x1f) << 6) | byte2);\n        }\n        else if ((byte1 & 0xf0) === 0xe0) {\n            // 3 bytes\n            var byte2 = bytes[offset++] & 0x3f;\n            var byte3 = bytes[offset++] & 0x3f;\n            units.push(((byte1 & 0x1f) << 12) | (byte2 << 6) | byte3);\n        }\n        else if ((byte1 & 0xf8) === 0xf0) {\n            // 4 bytes\n            var byte2 = bytes[offset++] & 0x3f;\n            var byte3 = bytes[offset++] & 0x3f;\n            var byte4 = bytes[offset++] & 0x3f;\n            var unit = ((byte1 & 0x07) << 0x12) | (byte2 << 0x0c) | (byte3 << 0x06) | byte4;\n            if (unit > 0xffff) {\n                unit -= 0x10000;\n                units.push(((unit >>> 10) & 0x3ff) | 0xd800);\n                unit = 0xdc00 | (unit & 0x3ff);\n            }\n            units.push(unit);\n        }\n        else {\n            units.push(byte1);\n        }\n        if (units.length >= CHUNK_SIZE) {\n            result += String.fromCharCode.apply(String, units);\n            units.length = 0;\n        }\n    }\n    if (units.length > 0) {\n        result += String.fromCharCode.apply(String, units);\n    }\n    return result;\n}\nvar sharedTextDecoder = TEXT_ENCODING_AVAILABLE ? new TextDecoder() : null;\nexport var TEXT_DECODER_THRESHOLD = !TEXT_ENCODING_AVAILABLE\n    ? UINT32_MAX\n    : typeof process !== \"undefined\" && process.env[\"TEXT_DECODER\"] !== \"force\"\n        ? 200\n        : 0;\nexport function utf8DecodeTD(bytes, inputOffset, byteLength) {\n    var stringBytes = bytes.subarray(inputOffset, inputOffset + byteLength);\n    return sharedTextDecoder.decode(stringBytes);\n}\n//# sourceMappingURL=utf8.mjs.map","/**\n * ExtData is used to handle Extension Types that are not registered to ExtensionCodec.\n */\nvar ExtData = /** @class */ (function () {\n    function ExtData(type, data) {\n        this.type = type;\n        this.data = data;\n    }\n    return ExtData;\n}());\nexport { ExtData };\n//# sourceMappingURL=ExtData.mjs.map","var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar DecodeError = /** @class */ (function (_super) {\n    __extends(DecodeError, _super);\n    function DecodeError(message) {\n        var _this = _super.call(this, message) || this;\n        // fix the prototype chain in a cross-platform way\n        var proto = Object.create(DecodeError.prototype);\n        Object.setPrototypeOf(_this, proto);\n        Object.defineProperty(_this, \"name\", {\n            configurable: true,\n            enumerable: false,\n            value: DecodeError.name,\n        });\n        return _this;\n    }\n    return DecodeError;\n}(Error));\nexport { DecodeError };\n//# sourceMappingURL=DecodeError.mjs.map","// https://github.com/msgpack/msgpack/blob/master/spec.md#timestamp-extension-type\nimport { DecodeError } from \"./DecodeError.mjs\";\nimport { getInt64, setInt64 } from \"./utils/int.mjs\";\nexport var EXT_TIMESTAMP = -1;\nvar TIMESTAMP32_MAX_SEC = 0x100000000 - 1; // 32-bit unsigned int\nvar TIMESTAMP64_MAX_SEC = 0x400000000 - 1; // 34-bit unsigned int\nexport function encodeTimeSpecToTimestamp(_a) {\n    var sec = _a.sec, nsec = _a.nsec;\n    if (sec >= 0 && nsec >= 0 && sec <= TIMESTAMP64_MAX_SEC) {\n        // Here sec >= 0 && nsec >= 0\n        if (nsec === 0 && sec <= TIMESTAMP32_MAX_SEC) {\n            // timestamp 32 = { sec32 (unsigned) }\n            var rv = new Uint8Array(4);\n            var view = new DataView(rv.buffer);\n            view.setUint32(0, sec);\n            return rv;\n        }\n        else {\n            // timestamp 64 = { nsec30 (unsigned), sec34 (unsigned) }\n            var secHigh = sec / 0x100000000;\n            var secLow = sec & 0xffffffff;\n            var rv = new Uint8Array(8);\n            var view = new DataView(rv.buffer);\n            // nsec30 | secHigh2\n            view.setUint32(0, (nsec << 2) | (secHigh & 0x3));\n            // secLow32\n            view.setUint32(4, secLow);\n            return rv;\n        }\n    }\n    else {\n        // timestamp 96 = { nsec32 (unsigned), sec64 (signed) }\n        var rv = new Uint8Array(12);\n        var view = new DataView(rv.buffer);\n        view.setUint32(0, nsec);\n        setInt64(view, 4, sec);\n        return rv;\n    }\n}\nexport function encodeDateToTimeSpec(date) {\n    var msec = date.getTime();\n    var sec = Math.floor(msec / 1e3);\n    var nsec = (msec - sec * 1e3) * 1e6;\n    // Normalizes { sec, nsec } to ensure nsec is unsigned.\n    var nsecInSec = Math.floor(nsec / 1e9);\n    return {\n        sec: sec + nsecInSec,\n        nsec: nsec - nsecInSec * 1e9,\n    };\n}\nexport function encodeTimestampExtension(object) {\n    if (object instanceof Date) {\n        var timeSpec = encodeDateToTimeSpec(object);\n        return encodeTimeSpecToTimestamp(timeSpec);\n    }\n    else {\n        return null;\n    }\n}\nexport function decodeTimestampToTimeSpec(data) {\n    var view = new DataView(data.buffer, data.byteOffset, data.byteLength);\n    // data may be 32, 64, or 96 bits\n    switch (data.byteLength) {\n        case 4: {\n            // timestamp 32 = { sec32 }\n            var sec = view.getUint32(0);\n            var nsec = 0;\n            return { sec: sec, nsec: nsec };\n        }\n        case 8: {\n            // timestamp 64 = { nsec30, sec34 }\n            var nsec30AndSecHigh2 = view.getUint32(0);\n            var secLow32 = view.getUint32(4);\n            var sec = (nsec30AndSecHigh2 & 0x3) * 0x100000000 + secLow32;\n            var nsec = nsec30AndSecHigh2 >>> 2;\n            return { sec: sec, nsec: nsec };\n        }\n        case 12: {\n            // timestamp 96 = { nsec32 (unsigned), sec64 (signed) }\n            var sec = getInt64(view, 4);\n            var nsec = view.getUint32(0);\n            return { sec: sec, nsec: nsec };\n        }\n        default:\n            throw new DecodeError(\"Unrecognized data size for timestamp (expected 4, 8, or 12): \" + data.length);\n    }\n}\nexport function decodeTimestampExtension(data) {\n    var timeSpec = decodeTimestampToTimeSpec(data);\n    return new Date(timeSpec.sec * 1e3 + timeSpec.nsec / 1e6);\n}\nexport var timestampExtension = {\n    type: EXT_TIMESTAMP,\n    encode: encodeTimestampExtension,\n    decode: decodeTimestampExtension,\n};\n//# sourceMappingURL=timestamp.mjs.map","// ExtensionCodec to handle MessagePack extensions\nimport { ExtData } from \"./ExtData.mjs\";\nimport { timestampExtension } from \"./timestamp.mjs\";\nvar ExtensionCodec = /** @class */ (function () {\n    function ExtensionCodec() {\n        // built-in extensions\n        this.builtInEncoders = [];\n        this.builtInDecoders = [];\n        // custom extensions\n        this.encoders = [];\n        this.decoders = [];\n        this.register(timestampExtension);\n    }\n    ExtensionCodec.prototype.register = function (_a) {\n        var type = _a.type, encode = _a.encode, decode = _a.decode;\n        if (type >= 0) {\n            // custom extensions\n            this.encoders[type] = encode;\n            this.decoders[type] = decode;\n        }\n        else {\n            // built-in extensions\n            var index = 1 + type;\n            this.builtInEncoders[index] = encode;\n            this.builtInDecoders[index] = decode;\n        }\n    };\n    ExtensionCodec.prototype.tryToEncode = function (object, context) {\n        // built-in extensions\n        for (var i = 0; i < this.builtInEncoders.length; i++) {\n            var encodeExt = this.builtInEncoders[i];\n            if (encodeExt != null) {\n                var data = encodeExt(object, context);\n                if (data != null) {\n                    var type = -1 - i;\n                    return new ExtData(type, data);\n                }\n            }\n        }\n        // custom extensions\n        for (var i = 0; i < this.encoders.length; i++) {\n            var encodeExt = this.encoders[i];\n            if (encodeExt != null) {\n                var data = encodeExt(object, context);\n                if (data != null) {\n                    var type = i;\n                    return new ExtData(type, data);\n                }\n            }\n        }\n        if (object instanceof ExtData) {\n            // to keep ExtData as is\n            return object;\n        }\n        return null;\n    };\n    ExtensionCodec.prototype.decode = function (data, type, context) {\n        var decodeExt = type < 0 ? this.builtInDecoders[-1 - type] : this.decoders[type];\n        if (decodeExt) {\n            return decodeExt(data, type, context);\n        }\n        else {\n            // decode() does not fail, returns ExtData instead.\n            return new ExtData(type, data);\n        }\n    };\n    ExtensionCodec.defaultCodec = new ExtensionCodec();\n    return ExtensionCodec;\n}());\nexport { ExtensionCodec };\n//# sourceMappingURL=ExtensionCodec.mjs.map","export function ensureUint8Array(buffer) {\n    if (buffer instanceof Uint8Array) {\n        return buffer;\n    }\n    else if (ArrayBuffer.isView(buffer)) {\n        return new Uint8Array(buffer.buffer, buffer.byteOffset, buffer.byteLength);\n    }\n    else if (buffer instanceof ArrayBuffer) {\n        return new Uint8Array(buffer);\n    }\n    else {\n        // ArrayLike<number>\n        return Uint8Array.from(buffer);\n    }\n}\nexport function createDataView(buffer) {\n    if (buffer instanceof ArrayBuffer) {\n        return new DataView(buffer);\n    }\n    var bufferView = ensureUint8Array(buffer);\n    return new DataView(bufferView.buffer, bufferView.byteOffset, bufferView.byteLength);\n}\n//# sourceMappingURL=typedArrays.mjs.map","import { utf8EncodeJs, utf8Count, TEXT_ENCODER_THRESHOLD, utf8EncodeTE } from \"./utils/utf8.mjs\";\nimport { ExtensionCodec } from \"./ExtensionCodec.mjs\";\nimport { setInt64, setUint64 } from \"./utils/int.mjs\";\nimport { ensureUint8Array } from \"./utils/typedArrays.mjs\";\nexport var DEFAULT_MAX_DEPTH = 100;\nexport var DEFAULT_INITIAL_BUFFER_SIZE = 2048;\nvar Encoder = /** @class */ (function () {\n    function Encoder(extensionCodec, context, maxDepth, initialBufferSize, sortKeys, forceFloat32, ignoreUndefined, forceIntegerToFloat) {\n        if (extensionCodec === void 0) { extensionCodec = ExtensionCodec.defaultCodec; }\n        if (context === void 0) { context = undefined; }\n        if (maxDepth === void 0) { maxDepth = DEFAULT_MAX_DEPTH; }\n        if (initialBufferSize === void 0) { initialBufferSize = DEFAULT_INITIAL_BUFFER_SIZE; }\n        if (sortKeys === void 0) { sortKeys = false; }\n        if (forceFloat32 === void 0) { forceFloat32 = false; }\n        if (ignoreUndefined === void 0) { ignoreUndefined = false; }\n        if (forceIntegerToFloat === void 0) { forceIntegerToFloat = false; }\n        this.extensionCodec = extensionCodec;\n        this.context = context;\n        this.maxDepth = maxDepth;\n        this.initialBufferSize = initialBufferSize;\n        this.sortKeys = sortKeys;\n        this.forceFloat32 = forceFloat32;\n        this.ignoreUndefined = ignoreUndefined;\n        this.forceIntegerToFloat = forceIntegerToFloat;\n        this.pos = 0;\n        this.view = new DataView(new ArrayBuffer(this.initialBufferSize));\n        this.bytes = new Uint8Array(this.view.buffer);\n    }\n    Encoder.prototype.getUint8Array = function () {\n        return this.bytes.subarray(0, this.pos);\n    };\n    Encoder.prototype.reinitializeState = function () {\n        this.pos = 0;\n    };\n    Encoder.prototype.encode = function (object) {\n        this.reinitializeState();\n        this.doEncode(object, 1);\n        return this.getUint8Array();\n    };\n    Encoder.prototype.doEncode = function (object, depth) {\n        if (depth > this.maxDepth) {\n            throw new Error(\"Too deep objects in depth \" + depth);\n        }\n        if (object == null) {\n            this.encodeNil();\n        }\n        else if (typeof object === \"boolean\") {\n            this.encodeBoolean(object);\n        }\n        else if (typeof object === \"number\") {\n            this.encodeNumber(object);\n        }\n        else if (typeof object === \"string\") {\n            this.encodeString(object);\n        }\n        else {\n            this.encodeObject(object, depth);\n        }\n    };\n    Encoder.prototype.ensureBufferSizeToWrite = function (sizeToWrite) {\n        var requiredSize = this.pos + sizeToWrite;\n        if (this.view.byteLength < requiredSize) {\n            this.resizeBuffer(requiredSize * 2);\n        }\n    };\n    Encoder.prototype.resizeBuffer = function (newSize) {\n        var newBuffer = new ArrayBuffer(newSize);\n        var newBytes = new Uint8Array(newBuffer);\n        var newView = new DataView(newBuffer);\n        newBytes.set(this.bytes);\n        this.view = newView;\n        this.bytes = newBytes;\n    };\n    Encoder.prototype.encodeNil = function () {\n        this.writeU8(0xc0);\n    };\n    Encoder.prototype.encodeBoolean = function (object) {\n        if (object === false) {\n            this.writeU8(0xc2);\n        }\n        else {\n            this.writeU8(0xc3);\n        }\n    };\n    Encoder.prototype.encodeNumber = function (object) {\n        if (Number.isSafeInteger(object) && !this.forceIntegerToFloat) {\n            if (object >= 0) {\n                if (object < 0x80) {\n                    // positive fixint\n                    this.writeU8(object);\n                }\n                else if (object < 0x100) {\n                    // uint 8\n                    this.writeU8(0xcc);\n                    this.writeU8(object);\n                }\n                else if (object < 0x10000) {\n                    // uint 16\n                    this.writeU8(0xcd);\n                    this.writeU16(object);\n                }\n                else if (object < 0x100000000) {\n                    // uint 32\n                    this.writeU8(0xce);\n                    this.writeU32(object);\n                }\n                else {\n                    // uint 64\n                    this.writeU8(0xcf);\n                    this.writeU64(object);\n                }\n            }\n            else {\n                if (object >= -0x20) {\n                    // negative fixint\n                    this.writeU8(0xe0 | (object + 0x20));\n                }\n                else if (object >= -0x80) {\n                    // int 8\n                    this.writeU8(0xd0);\n                    this.writeI8(object);\n                }\n                else if (object >= -0x8000) {\n                    // int 16\n                    this.writeU8(0xd1);\n                    this.writeI16(object);\n                }\n                else if (object >= -0x80000000) {\n                    // int 32\n                    this.writeU8(0xd2);\n                    this.writeI32(object);\n                }\n                else {\n                    // int 64\n                    this.writeU8(0xd3);\n                    this.writeI64(object);\n                }\n            }\n        }\n        else {\n            // non-integer numbers\n            if (this.forceFloat32) {\n                // float 32\n                this.writeU8(0xca);\n                this.writeF32(object);\n            }\n            else {\n                // float 64\n                this.writeU8(0xcb);\n                this.writeF64(object);\n            }\n        }\n    };\n    Encoder.prototype.writeStringHeader = function (byteLength) {\n        if (byteLength < 32) {\n            // fixstr\n            this.writeU8(0xa0 + byteLength);\n        }\n        else if (byteLength < 0x100) {\n            // str 8\n            this.writeU8(0xd9);\n            this.writeU8(byteLength);\n        }\n        else if (byteLength < 0x10000) {\n            // str 16\n            this.writeU8(0xda);\n            this.writeU16(byteLength);\n        }\n        else if (byteLength < 0x100000000) {\n            // str 32\n            this.writeU8(0xdb);\n            this.writeU32(byteLength);\n        }\n        else {\n            throw new Error(\"Too long string: \" + byteLength + \" bytes in UTF-8\");\n        }\n    };\n    Encoder.prototype.encodeString = function (object) {\n        var maxHeaderSize = 1 + 4;\n        var strLength = object.length;\n        if (strLength > TEXT_ENCODER_THRESHOLD) {\n            var byteLength = utf8Count(object);\n            this.ensureBufferSizeToWrite(maxHeaderSize + byteLength);\n            this.writeStringHeader(byteLength);\n            utf8EncodeTE(object, this.bytes, this.pos);\n            this.pos += byteLength;\n        }\n        else {\n            var byteLength = utf8Count(object);\n            this.ensureBufferSizeToWrite(maxHeaderSize + byteLength);\n            this.writeStringHeader(byteLength);\n            utf8EncodeJs(object, this.bytes, this.pos);\n            this.pos += byteLength;\n        }\n    };\n    Encoder.prototype.encodeObject = function (object, depth) {\n        // try to encode objects with custom codec first of non-primitives\n        var ext = this.extensionCodec.tryToEncode(object, this.context);\n        if (ext != null) {\n            this.encodeExtension(ext);\n        }\n        else if (Array.isArray(object)) {\n            this.encodeArray(object, depth);\n        }\n        else if (ArrayBuffer.isView(object)) {\n            this.encodeBinary(object);\n        }\n        else if (typeof object === \"object\") {\n            this.encodeMap(object, depth);\n        }\n        else {\n            // symbol, function and other special object come here unless extensionCodec handles them.\n            throw new Error(\"Unrecognized object: \" + Object.prototype.toString.apply(object));\n        }\n    };\n    Encoder.prototype.encodeBinary = function (object) {\n        var size = object.byteLength;\n        if (size < 0x100) {\n            // bin 8\n            this.writeU8(0xc4);\n            this.writeU8(size);\n        }\n        else if (size < 0x10000) {\n            // bin 16\n            this.writeU8(0xc5);\n            this.writeU16(size);\n        }\n        else if (size < 0x100000000) {\n            // bin 32\n            this.writeU8(0xc6);\n            this.writeU32(size);\n        }\n        else {\n            throw new Error(\"Too large binary: \" + size);\n        }\n        var bytes = ensureUint8Array(object);\n        this.writeU8a(bytes);\n    };\n    Encoder.prototype.encodeArray = function (object, depth) {\n        var size = object.length;\n        if (size < 16) {\n            // fixarray\n            this.writeU8(0x90 + size);\n        }\n        else if (size < 0x10000) {\n            // array 16\n            this.writeU8(0xdc);\n            this.writeU16(size);\n        }\n        else if (size < 0x100000000) {\n            // array 32\n            this.writeU8(0xdd);\n            this.writeU32(size);\n        }\n        else {\n            throw new Error(\"Too large array: \" + size);\n        }\n        for (var _i = 0, object_1 = object; _i < object_1.length; _i++) {\n            var item = object_1[_i];\n            this.doEncode(item, depth + 1);\n        }\n    };\n    Encoder.prototype.countWithoutUndefined = function (object, keys) {\n        var count = 0;\n        for (var _i = 0, keys_1 = keys; _i < keys_1.length; _i++) {\n            var key = keys_1[_i];\n            if (object[key] !== undefined) {\n                count++;\n            }\n        }\n        return count;\n    };\n    Encoder.prototype.encodeMap = function (object, depth) {\n        var keys = Object.keys(object);\n        if (this.sortKeys) {\n            keys.sort();\n        }\n        var size = this.ignoreUndefined ? this.countWithoutUndefined(object, keys) : keys.length;\n        if (size < 16) {\n            // fixmap\n            this.writeU8(0x80 + size);\n        }\n        else if (size < 0x10000) {\n            // map 16\n            this.writeU8(0xde);\n            this.writeU16(size);\n        }\n        else if (size < 0x100000000) {\n            // map 32\n            this.writeU8(0xdf);\n            this.writeU32(size);\n        }\n        else {\n            throw new Error(\"Too large map object: \" + size);\n        }\n        for (var _i = 0, keys_2 = keys; _i < keys_2.length; _i++) {\n            var key = keys_2[_i];\n            var value = object[key];\n            if (!(this.ignoreUndefined && value === undefined)) {\n                this.encodeString(key);\n                this.doEncode(value, depth + 1);\n            }\n        }\n    };\n    Encoder.prototype.encodeExtension = function (ext) {\n        var size = ext.data.length;\n        if (size === 1) {\n            // fixext 1\n            this.writeU8(0xd4);\n        }\n        else if (size === 2) {\n            // fixext 2\n            this.writeU8(0xd5);\n        }\n        else if (size === 4) {\n            // fixext 4\n            this.writeU8(0xd6);\n        }\n        else if (size === 8) {\n            // fixext 8\n            this.writeU8(0xd7);\n        }\n        else if (size === 16) {\n            // fixext 16\n            this.writeU8(0xd8);\n        }\n        else if (size < 0x100) {\n            // ext 8\n            this.writeU8(0xc7);\n            this.writeU8(size);\n        }\n        else if (size < 0x10000) {\n            // ext 16\n            this.writeU8(0xc8);\n            this.writeU16(size);\n        }\n        else if (size < 0x100000000) {\n            // ext 32\n            this.writeU8(0xc9);\n            this.writeU32(size);\n        }\n        else {\n            throw new Error(\"Too large extension object: \" + size);\n        }\n        this.writeI8(ext.type);\n        this.writeU8a(ext.data);\n    };\n    Encoder.prototype.writeU8 = function (value) {\n        this.ensureBufferSizeToWrite(1);\n        this.view.setUint8(this.pos, value);\n        this.pos++;\n    };\n    Encoder.prototype.writeU8a = function (values) {\n        var size = values.length;\n        this.ensureBufferSizeToWrite(size);\n        this.bytes.set(values, this.pos);\n        this.pos += size;\n    };\n    Encoder.prototype.writeI8 = function (value) {\n        this.ensureBufferSizeToWrite(1);\n        this.view.setInt8(this.pos, value);\n        this.pos++;\n    };\n    Encoder.prototype.writeU16 = function (value) {\n        this.ensureBufferSizeToWrite(2);\n        this.view.setUint16(this.pos, value);\n        this.pos += 2;\n    };\n    Encoder.prototype.writeI16 = function (value) {\n        this.ensureBufferSizeToWrite(2);\n        this.view.setInt16(this.pos, value);\n        this.pos += 2;\n    };\n    Encoder.prototype.writeU32 = function (value) {\n        this.ensureBufferSizeToWrite(4);\n        this.view.setUint32(this.pos, value);\n        this.pos += 4;\n    };\n    Encoder.prototype.writeI32 = function (value) {\n        this.ensureBufferSizeToWrite(4);\n        this.view.setInt32(this.pos, value);\n        this.pos += 4;\n    };\n    Encoder.prototype.writeF32 = function (value) {\n        this.ensureBufferSizeToWrite(4);\n        this.view.setFloat32(this.pos, value);\n        this.pos += 4;\n    };\n    Encoder.prototype.writeF64 = function (value) {\n        this.ensureBufferSizeToWrite(8);\n        this.view.setFloat64(this.pos, value);\n        this.pos += 8;\n    };\n    Encoder.prototype.writeU64 = function (value) {\n        this.ensureBufferSizeToWrite(8);\n        setUint64(this.view, this.pos, value);\n        this.pos += 8;\n    };\n    Encoder.prototype.writeI64 = function (value) {\n        this.ensureBufferSizeToWrite(8);\n        setInt64(this.view, this.pos, value);\n        this.pos += 8;\n    };\n    return Encoder;\n}());\nexport { Encoder };\n//# sourceMappingURL=Encoder.mjs.map","import { Encoder } from \"./Encoder.mjs\";\nvar defaultEncodeOptions = {};\n/**\n * It encodes `value` in the MessagePack format and\n * returns a byte buffer.\n *\n * The returned buffer is a slice of a larger `ArrayBuffer`, so you have to use its `#byteOffset` and `#byteLength` in order to convert it to another typed arrays including NodeJS `Buffer`.\n */\nexport function encode(value, options) {\n    if (options === void 0) { options = defaultEncodeOptions; }\n    var encoder = new Encoder(options.extensionCodec, options.context, options.maxDepth, options.initialBufferSize, options.sortKeys, options.forceFloat32, options.ignoreUndefined, options.forceIntegerToFloat);\n    return encoder.encode(value);\n}\n//# sourceMappingURL=encode.mjs.map","export function prettyByte(byte) {\n    return (byte < 0 ? \"-\" : \"\") + \"0x\" + Math.abs(byte).toString(16).padStart(2, \"0\");\n}\n//# sourceMappingURL=prettyByte.mjs.map","import { utf8DecodeJs } from \"./utils/utf8.mjs\";\nvar DEFAULT_MAX_KEY_LENGTH = 16;\nvar DEFAULT_MAX_LENGTH_PER_KEY = 16;\nvar CachedKeyDecoder = /** @class */ (function () {\n    function CachedKeyDecoder(maxKeyLength, maxLengthPerKey) {\n        if (maxKeyLength === void 0) { maxKeyLength = DEFAULT_MAX_KEY_LENGTH; }\n        if (maxLengthPerKey === void 0) { maxLengthPerKey = DEFAULT_MAX_LENGTH_PER_KEY; }\n        this.maxKeyLength = maxKeyLength;\n        this.maxLengthPerKey = maxLengthPerKey;\n        this.hit = 0;\n        this.miss = 0;\n        // avoid `new Array(N)`, which makes a sparse array,\n        // because a sparse array is typically slower than a non-sparse array.\n        this.caches = [];\n        for (var i = 0; i < this.maxKeyLength; i++) {\n            this.caches.push([]);\n        }\n    }\n    CachedKeyDecoder.prototype.canBeCached = function (byteLength) {\n        return byteLength > 0 && byteLength <= this.maxKeyLength;\n    };\n    CachedKeyDecoder.prototype.find = function (bytes, inputOffset, byteLength) {\n        var records = this.caches[byteLength - 1];\n        FIND_CHUNK: for (var _i = 0, records_1 = records; _i < records_1.length; _i++) {\n            var record = records_1[_i];\n            var recordBytes = record.bytes;\n            for (var j = 0; j < byteLength; j++) {\n                if (recordBytes[j] !== bytes[inputOffset + j]) {\n                    continue FIND_CHUNK;\n                }\n            }\n            return record.str;\n        }\n        return null;\n    };\n    CachedKeyDecoder.prototype.store = function (bytes, value) {\n        var records = this.caches[bytes.length - 1];\n        var record = { bytes: bytes, str: value };\n        if (records.length >= this.maxLengthPerKey) {\n            // `records` are full!\n            // Set `record` to an arbitrary position.\n            records[(Math.random() * records.length) | 0] = record;\n        }\n        else {\n            records.push(record);\n        }\n    };\n    CachedKeyDecoder.prototype.decode = function (bytes, inputOffset, byteLength) {\n        var cachedValue = this.find(bytes, inputOffset, byteLength);\n        if (cachedValue != null) {\n            this.hit++;\n            return cachedValue;\n        }\n        this.miss++;\n        var str = utf8DecodeJs(bytes, inputOffset, byteLength);\n        // Ensure to copy a slice of bytes because the byte may be NodeJS Buffer and Buffer#slice() returns a reference to its internal ArrayBuffer.\n        var slicedCopyOfBytes = Uint8Array.prototype.slice.call(bytes, inputOffset, inputOffset + byteLength);\n        this.store(slicedCopyOfBytes, str);\n        return str;\n    };\n    return CachedKeyDecoder;\n}());\nexport { CachedKeyDecoder };\n//# sourceMappingURL=CachedKeyDecoder.mjs.map","var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nvar __asyncValues = (this && this.__asyncValues) || function (o) {\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\n    var m = o[Symbol.asyncIterator], i;\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\n};\nvar __await = (this && this.__await) || function (v) { return this instanceof __await ? (this.v = v, this) : new __await(v); }\nvar __asyncGenerator = (this && this.__asyncGenerator) || function (thisArg, _arguments, generator) {\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\n    function fulfill(value) { resume(\"next\", value); }\n    function reject(value) { resume(\"throw\", value); }\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\n};\nimport { prettyByte } from \"./utils/prettyByte.mjs\";\nimport { ExtensionCodec } from \"./ExtensionCodec.mjs\";\nimport { getInt64, getUint64, UINT32_MAX } from \"./utils/int.mjs\";\nimport { utf8DecodeJs, TEXT_DECODER_THRESHOLD, utf8DecodeTD } from \"./utils/utf8.mjs\";\nimport { createDataView, ensureUint8Array } from \"./utils/typedArrays.mjs\";\nimport { CachedKeyDecoder } from \"./CachedKeyDecoder.mjs\";\nimport { DecodeError } from \"./DecodeError.mjs\";\nvar isValidMapKeyType = function (key) {\n    var keyType = typeof key;\n    return keyType === \"string\" || keyType === \"number\";\n};\nvar HEAD_BYTE_REQUIRED = -1;\nvar EMPTY_VIEW = new DataView(new ArrayBuffer(0));\nvar EMPTY_BYTES = new Uint8Array(EMPTY_VIEW.buffer);\n// IE11: Hack to support IE11.\n// IE11: Drop this hack and just use RangeError when IE11 is obsolete.\nexport var DataViewIndexOutOfBoundsError = (function () {\n    try {\n        // IE11: The spec says it should throw RangeError,\n        // IE11: but in IE11 it throws TypeError.\n        EMPTY_VIEW.getInt8(0);\n    }\n    catch (e) {\n        return e.constructor;\n    }\n    throw new Error(\"never reached\");\n})();\nvar MORE_DATA = new DataViewIndexOutOfBoundsError(\"Insufficient data\");\nvar sharedCachedKeyDecoder = new CachedKeyDecoder();\nvar Decoder = /** @class */ (function () {\n    function Decoder(extensionCodec, context, maxStrLength, maxBinLength, maxArrayLength, maxMapLength, maxExtLength, keyDecoder) {\n        if (extensionCodec === void 0) { extensionCodec = ExtensionCodec.defaultCodec; }\n        if (context === void 0) { context = undefined; }\n        if (maxStrLength === void 0) { maxStrLength = UINT32_MAX; }\n        if (maxBinLength === void 0) { maxBinLength = UINT32_MAX; }\n        if (maxArrayLength === void 0) { maxArrayLength = UINT32_MAX; }\n        if (maxMapLength === void 0) { maxMapLength = UINT32_MAX; }\n        if (maxExtLength === void 0) { maxExtLength = UINT32_MAX; }\n        if (keyDecoder === void 0) { keyDecoder = sharedCachedKeyDecoder; }\n        this.extensionCodec = extensionCodec;\n        this.context = context;\n        this.maxStrLength = maxStrLength;\n        this.maxBinLength = maxBinLength;\n        this.maxArrayLength = maxArrayLength;\n        this.maxMapLength = maxMapLength;\n        this.maxExtLength = maxExtLength;\n        this.keyDecoder = keyDecoder;\n        this.totalPos = 0;\n        this.pos = 0;\n        this.view = EMPTY_VIEW;\n        this.bytes = EMPTY_BYTES;\n        this.headByte = HEAD_BYTE_REQUIRED;\n        this.stack = [];\n    }\n    Decoder.prototype.reinitializeState = function () {\n        this.totalPos = 0;\n        this.headByte = HEAD_BYTE_REQUIRED;\n        this.stack.length = 0;\n        // view, bytes, and pos will be re-initialized in setBuffer()\n    };\n    Decoder.prototype.setBuffer = function (buffer) {\n        this.bytes = ensureUint8Array(buffer);\n        this.view = createDataView(this.bytes);\n        this.pos = 0;\n    };\n    Decoder.prototype.appendBuffer = function (buffer) {\n        if (this.headByte === HEAD_BYTE_REQUIRED && !this.hasRemaining(1)) {\n            this.setBuffer(buffer);\n        }\n        else {\n            var remainingData = this.bytes.subarray(this.pos);\n            var newData = ensureUint8Array(buffer);\n            // concat remainingData + newData\n            var newBuffer = new Uint8Array(remainingData.length + newData.length);\n            newBuffer.set(remainingData);\n            newBuffer.set(newData, remainingData.length);\n            this.setBuffer(newBuffer);\n        }\n    };\n    Decoder.prototype.hasRemaining = function (size) {\n        return this.view.byteLength - this.pos >= size;\n    };\n    Decoder.prototype.createExtraByteError = function (posToShow) {\n        var _a = this, view = _a.view, pos = _a.pos;\n        return new RangeError(\"Extra \" + (view.byteLength - pos) + \" of \" + view.byteLength + \" byte(s) found at buffer[\" + posToShow + \"]\");\n    };\n    /**\n     * @throws {DecodeError}\n     * @throws {RangeError}\n     */\n    Decoder.prototype.decode = function (buffer) {\n        this.reinitializeState();\n        this.setBuffer(buffer);\n        var object = this.doDecodeSync();\n        if (this.hasRemaining(1)) {\n            throw this.createExtraByteError(this.pos);\n        }\n        return object;\n    };\n    Decoder.prototype.decodeMulti = function (buffer) {\n        return __generator(this, function (_a) {\n            switch (_a.label) {\n                case 0:\n                    this.reinitializeState();\n                    this.setBuffer(buffer);\n                    _a.label = 1;\n                case 1:\n                    if (!this.hasRemaining(1)) return [3 /*break*/, 3];\n                    return [4 /*yield*/, this.doDecodeSync()];\n                case 2:\n                    _a.sent();\n                    return [3 /*break*/, 1];\n                case 3: return [2 /*return*/];\n            }\n        });\n    };\n    Decoder.prototype.decodeAsync = function (stream) {\n        var stream_1, stream_1_1;\n        var e_1, _a;\n        return __awaiter(this, void 0, void 0, function () {\n            var decoded, object, buffer, e_1_1, _b, headByte, pos, totalPos;\n            return __generator(this, function (_c) {\n                switch (_c.label) {\n                    case 0:\n                        decoded = false;\n                        _c.label = 1;\n                    case 1:\n                        _c.trys.push([1, 6, 7, 12]);\n                        stream_1 = __asyncValues(stream);\n                        _c.label = 2;\n                    case 2: return [4 /*yield*/, stream_1.next()];\n                    case 3:\n                        if (!(stream_1_1 = _c.sent(), !stream_1_1.done)) return [3 /*break*/, 5];\n                        buffer = stream_1_1.value;\n                        if (decoded) {\n                            throw this.createExtraByteError(this.totalPos);\n                        }\n                        this.appendBuffer(buffer);\n                        try {\n                            object = this.doDecodeSync();\n                            decoded = true;\n                        }\n                        catch (e) {\n                            if (!(e instanceof DataViewIndexOutOfBoundsError)) {\n                                throw e; // rethrow\n                            }\n                            // fallthrough\n                        }\n                        this.totalPos += this.pos;\n                        _c.label = 4;\n                    case 4: return [3 /*break*/, 2];\n                    case 5: return [3 /*break*/, 12];\n                    case 6:\n                        e_1_1 = _c.sent();\n                        e_1 = { error: e_1_1 };\n                        return [3 /*break*/, 12];\n                    case 7:\n                        _c.trys.push([7, , 10, 11]);\n                        if (!(stream_1_1 && !stream_1_1.done && (_a = stream_1.return))) return [3 /*break*/, 9];\n                        return [4 /*yield*/, _a.call(stream_1)];\n                    case 8:\n                        _c.sent();\n                        _c.label = 9;\n                    case 9: return [3 /*break*/, 11];\n                    case 10:\n                        if (e_1) throw e_1.error;\n                        return [7 /*endfinally*/];\n                    case 11: return [7 /*endfinally*/];\n                    case 12:\n                        if (decoded) {\n                            if (this.hasRemaining(1)) {\n                                throw this.createExtraByteError(this.totalPos);\n                            }\n                            return [2 /*return*/, object];\n                        }\n                        _b = this, headByte = _b.headByte, pos = _b.pos, totalPos = _b.totalPos;\n                        throw new RangeError(\"Insufficient data in parsing \" + prettyByte(headByte) + \" at \" + totalPos + \" (\" + pos + \" in the current buffer)\");\n                }\n            });\n        });\n    };\n    Decoder.prototype.decodeArrayStream = function (stream) {\n        return this.decodeMultiAsync(stream, true);\n    };\n    Decoder.prototype.decodeStream = function (stream) {\n        return this.decodeMultiAsync(stream, false);\n    };\n    Decoder.prototype.decodeMultiAsync = function (stream, isArray) {\n        return __asyncGenerator(this, arguments, function decodeMultiAsync_1() {\n            var isArrayHeaderRequired, arrayItemsLeft, stream_2, stream_2_1, buffer, e_2, e_3_1;\n            var e_3, _a;\n            return __generator(this, function (_b) {\n                switch (_b.label) {\n                    case 0:\n                        isArrayHeaderRequired = isArray;\n                        arrayItemsLeft = -1;\n                        _b.label = 1;\n                    case 1:\n                        _b.trys.push([1, 13, 14, 19]);\n                        stream_2 = __asyncValues(stream);\n                        _b.label = 2;\n                    case 2: return [4 /*yield*/, __await(stream_2.next())];\n                    case 3:\n                        if (!(stream_2_1 = _b.sent(), !stream_2_1.done)) return [3 /*break*/, 12];\n                        buffer = stream_2_1.value;\n                        if (isArray && arrayItemsLeft === 0) {\n                            throw this.createExtraByteError(this.totalPos);\n                        }\n                        this.appendBuffer(buffer);\n                        if (isArrayHeaderRequired) {\n                            arrayItemsLeft = this.readArraySize();\n                            isArrayHeaderRequired = false;\n                            this.complete();\n                        }\n                        _b.label = 4;\n                    case 4:\n                        _b.trys.push([4, 9, , 10]);\n                        _b.label = 5;\n                    case 5:\n                        if (!true) return [3 /*break*/, 8];\n                        return [4 /*yield*/, __await(this.doDecodeSync())];\n                    case 6: return [4 /*yield*/, _b.sent()];\n                    case 7:\n                        _b.sent();\n                        if (--arrayItemsLeft === 0) {\n                            return [3 /*break*/, 8];\n                        }\n                        return [3 /*break*/, 5];\n                    case 8: return [3 /*break*/, 10];\n                    case 9:\n                        e_2 = _b.sent();\n                        if (!(e_2 instanceof DataViewIndexOutOfBoundsError)) {\n                            throw e_2; // rethrow\n                        }\n                        return [3 /*break*/, 10];\n                    case 10:\n                        this.totalPos += this.pos;\n                        _b.label = 11;\n                    case 11: return [3 /*break*/, 2];\n                    case 12: return [3 /*break*/, 19];\n                    case 13:\n                        e_3_1 = _b.sent();\n                        e_3 = { error: e_3_1 };\n                        return [3 /*break*/, 19];\n                    case 14:\n                        _b.trys.push([14, , 17, 18]);\n                        if (!(stream_2_1 && !stream_2_1.done && (_a = stream_2.return))) return [3 /*break*/, 16];\n                        return [4 /*yield*/, __await(_a.call(stream_2))];\n                    case 15:\n                        _b.sent();\n                        _b.label = 16;\n                    case 16: return [3 /*break*/, 18];\n                    case 17:\n                        if (e_3) throw e_3.error;\n                        return [7 /*endfinally*/];\n                    case 18: return [7 /*endfinally*/];\n                    case 19: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    Decoder.prototype.doDecodeSync = function () {\n        DECODE: while (true) {\n            var headByte = this.readHeadByte();\n            var object = void 0;\n            if (headByte >= 0xe0) {\n                // negative fixint (111x xxxx) 0xe0 - 0xff\n                object = headByte - 0x100;\n            }\n            else if (headByte < 0xc0) {\n                if (headByte < 0x80) {\n                    // positive fixint (0xxx xxxx) 0x00 - 0x7f\n                    object = headByte;\n                }\n                else if (headByte < 0x90) {\n                    // fixmap (1000 xxxx) 0x80 - 0x8f\n                    var size = headByte - 0x80;\n                    if (size !== 0) {\n                        this.pushMapState(size);\n                        this.complete();\n                        continue DECODE;\n                    }\n                    else {\n                        object = {};\n                    }\n                }\n                else if (headByte < 0xa0) {\n                    // fixarray (1001 xxxx) 0x90 - 0x9f\n                    var size = headByte - 0x90;\n                    if (size !== 0) {\n                        this.pushArrayState(size);\n                        this.complete();\n                        continue DECODE;\n                    }\n                    else {\n                        object = [];\n                    }\n                }\n                else {\n                    // fixstr (101x xxxx) 0xa0 - 0xbf\n                    var byteLength = headByte - 0xa0;\n                    object = this.decodeUtf8String(byteLength, 0);\n                }\n            }\n            else if (headByte === 0xc0) {\n                // nil\n                object = null;\n            }\n            else if (headByte === 0xc2) {\n                // false\n                object = false;\n            }\n            else if (headByte === 0xc3) {\n                // true\n                object = true;\n            }\n            else if (headByte === 0xca) {\n                // float 32\n                object = this.readF32();\n            }\n            else if (headByte === 0xcb) {\n                // float 64\n                object = this.readF64();\n            }\n            else if (headByte === 0xcc) {\n                // uint 8\n                object = this.readU8();\n            }\n            else if (headByte === 0xcd) {\n                // uint 16\n                object = this.readU16();\n            }\n            else if (headByte === 0xce) {\n                // uint 32\n                object = this.readU32();\n            }\n            else if (headByte === 0xcf) {\n                // uint 64\n                object = this.readU64();\n            }\n            else if (headByte === 0xd0) {\n                // int 8\n                object = this.readI8();\n            }\n            else if (headByte === 0xd1) {\n                // int 16\n                object = this.readI16();\n            }\n            else if (headByte === 0xd2) {\n                // int 32\n                object = this.readI32();\n            }\n            else if (headByte === 0xd3) {\n                // int 64\n                object = this.readI64();\n            }\n            else if (headByte === 0xd9) {\n                // str 8\n                var byteLength = this.lookU8();\n                object = this.decodeUtf8String(byteLength, 1);\n            }\n            else if (headByte === 0xda) {\n                // str 16\n                var byteLength = this.lookU16();\n                object = this.decodeUtf8String(byteLength, 2);\n            }\n            else if (headByte === 0xdb) {\n                // str 32\n                var byteLength = this.lookU32();\n                object = this.decodeUtf8String(byteLength, 4);\n            }\n            else if (headByte === 0xdc) {\n                // array 16\n                var size = this.readU16();\n                if (size !== 0) {\n                    this.pushArrayState(size);\n                    this.complete();\n                    continue DECODE;\n                }\n                else {\n                    object = [];\n                }\n            }\n            else if (headByte === 0xdd) {\n                // array 32\n                var size = this.readU32();\n                if (size !== 0) {\n                    this.pushArrayState(size);\n                    this.complete();\n                    continue DECODE;\n                }\n                else {\n                    object = [];\n                }\n            }\n            else if (headByte === 0xde) {\n                // map 16\n                var size = this.readU16();\n                if (size !== 0) {\n                    this.pushMapState(size);\n                    this.complete();\n                    continue DECODE;\n                }\n                else {\n                    object = {};\n                }\n            }\n            else if (headByte === 0xdf) {\n                // map 32\n                var size = this.readU32();\n                if (size !== 0) {\n                    this.pushMapState(size);\n                    this.complete();\n                    continue DECODE;\n                }\n                else {\n                    object = {};\n                }\n            }\n            else if (headByte === 0xc4) {\n                // bin 8\n                var size = this.lookU8();\n                object = this.decodeBinary(size, 1);\n            }\n            else if (headByte === 0xc5) {\n                // bin 16\n                var size = this.lookU16();\n                object = this.decodeBinary(size, 2);\n            }\n            else if (headByte === 0xc6) {\n                // bin 32\n                var size = this.lookU32();\n                object = this.decodeBinary(size, 4);\n            }\n            else if (headByte === 0xd4) {\n                // fixext 1\n                object = this.decodeExtension(1, 0);\n            }\n            else if (headByte === 0xd5) {\n                // fixext 2\n                object = this.decodeExtension(2, 0);\n            }\n            else if (headByte === 0xd6) {\n                // fixext 4\n                object = this.decodeExtension(4, 0);\n            }\n            else if (headByte === 0xd7) {\n                // fixext 8\n                object = this.decodeExtension(8, 0);\n            }\n            else if (headByte === 0xd8) {\n                // fixext 16\n                object = this.decodeExtension(16, 0);\n            }\n            else if (headByte === 0xc7) {\n                // ext 8\n                var size = this.lookU8();\n                object = this.decodeExtension(size, 1);\n            }\n            else if (headByte === 0xc8) {\n                // ext 16\n                var size = this.lookU16();\n                object = this.decodeExtension(size, 2);\n            }\n            else if (headByte === 0xc9) {\n                // ext 32\n                var size = this.lookU32();\n                object = this.decodeExtension(size, 4);\n            }\n            else {\n                throw new DecodeError(\"Unrecognized type byte: \" + prettyByte(headByte));\n            }\n            this.complete();\n            var stack = this.stack;\n            while (stack.length > 0) {\n                // arrays and maps\n                var state = stack[stack.length - 1];\n                if (state.type === 0 /* ARRAY */) {\n                    state.array[state.position] = object;\n                    state.position++;\n                    if (state.position === state.size) {\n                        stack.pop();\n                        object = state.array;\n                    }\n                    else {\n                        continue DECODE;\n                    }\n                }\n                else if (state.type === 1 /* MAP_KEY */) {\n                    if (!isValidMapKeyType(object)) {\n                        throw new DecodeError(\"The type of key must be string or number but \" + typeof object);\n                    }\n                    if (object === \"__proto__\") {\n                        throw new DecodeError(\"The key __proto__ is not allowed\");\n                    }\n                    state.key = object;\n                    state.type = 2 /* MAP_VALUE */;\n                    continue DECODE;\n                }\n                else {\n                    // it must be `state.type === State.MAP_VALUE` here\n                    state.map[state.key] = object;\n                    state.readCount++;\n                    if (state.readCount === state.size) {\n                        stack.pop();\n                        object = state.map;\n                    }\n                    else {\n                        state.key = null;\n                        state.type = 1 /* MAP_KEY */;\n                        continue DECODE;\n                    }\n                }\n            }\n            return object;\n        }\n    };\n    Decoder.prototype.readHeadByte = function () {\n        if (this.headByte === HEAD_BYTE_REQUIRED) {\n            this.headByte = this.readU8();\n            // console.log(\"headByte\", prettyByte(this.headByte));\n        }\n        return this.headByte;\n    };\n    Decoder.prototype.complete = function () {\n        this.headByte = HEAD_BYTE_REQUIRED;\n    };\n    Decoder.prototype.readArraySize = function () {\n        var headByte = this.readHeadByte();\n        switch (headByte) {\n            case 0xdc:\n                return this.readU16();\n            case 0xdd:\n                return this.readU32();\n            default: {\n                if (headByte < 0xa0) {\n                    return headByte - 0x90;\n                }\n                else {\n                    throw new DecodeError(\"Unrecognized array type byte: \" + prettyByte(headByte));\n                }\n            }\n        }\n    };\n    Decoder.prototype.pushMapState = function (size) {\n        if (size > this.maxMapLength) {\n            throw new DecodeError(\"Max length exceeded: map length (\" + size + \") > maxMapLengthLength (\" + this.maxMapLength + \")\");\n        }\n        this.stack.push({\n            type: 1 /* MAP_KEY */,\n            size: size,\n            key: null,\n            readCount: 0,\n            map: {},\n        });\n    };\n    Decoder.prototype.pushArrayState = function (size) {\n        if (size > this.maxArrayLength) {\n            throw new DecodeError(\"Max length exceeded: array length (\" + size + \") > maxArrayLength (\" + this.maxArrayLength + \")\");\n        }\n        this.stack.push({\n            type: 0 /* ARRAY */,\n            size: size,\n            array: new Array(size),\n            position: 0,\n        });\n    };\n    Decoder.prototype.decodeUtf8String = function (byteLength, headerOffset) {\n        var _a;\n        if (byteLength > this.maxStrLength) {\n            throw new DecodeError(\"Max length exceeded: UTF-8 byte length (\" + byteLength + \") > maxStrLength (\" + this.maxStrLength + \")\");\n        }\n        if (this.bytes.byteLength < this.pos + headerOffset + byteLength) {\n            throw MORE_DATA;\n        }\n        var offset = this.pos + headerOffset;\n        var object;\n        if (this.stateIsMapKey() && ((_a = this.keyDecoder) === null || _a === void 0 ? void 0 : _a.canBeCached(byteLength))) {\n            object = this.keyDecoder.decode(this.bytes, offset, byteLength);\n        }\n        else if (byteLength > TEXT_DECODER_THRESHOLD) {\n            object = utf8DecodeTD(this.bytes, offset, byteLength);\n        }\n        else {\n            object = utf8DecodeJs(this.bytes, offset, byteLength);\n        }\n        this.pos += headerOffset + byteLength;\n        return object;\n    };\n    Decoder.prototype.stateIsMapKey = function () {\n        if (this.stack.length > 0) {\n            var state = this.stack[this.stack.length - 1];\n            return state.type === 1 /* MAP_KEY */;\n        }\n        return false;\n    };\n    Decoder.prototype.decodeBinary = function (byteLength, headOffset) {\n        if (byteLength > this.maxBinLength) {\n            throw new DecodeError(\"Max length exceeded: bin length (\" + byteLength + \") > maxBinLength (\" + this.maxBinLength + \")\");\n        }\n        if (!this.hasRemaining(byteLength + headOffset)) {\n            throw MORE_DATA;\n        }\n        var offset = this.pos + headOffset;\n        var object = this.bytes.subarray(offset, offset + byteLength);\n        this.pos += headOffset + byteLength;\n        return object;\n    };\n    Decoder.prototype.decodeExtension = function (size, headOffset) {\n        if (size > this.maxExtLength) {\n            throw new DecodeError(\"Max length exceeded: ext length (\" + size + \") > maxExtLength (\" + this.maxExtLength + \")\");\n        }\n        var extType = this.view.getInt8(this.pos + headOffset);\n        var data = this.decodeBinary(size, headOffset + 1 /* extType */);\n        return this.extensionCodec.decode(data, extType, this.context);\n    };\n    Decoder.prototype.lookU8 = function () {\n        return this.view.getUint8(this.pos);\n    };\n    Decoder.prototype.lookU16 = function () {\n        return this.view.getUint16(this.pos);\n    };\n    Decoder.prototype.lookU32 = function () {\n        return this.view.getUint32(this.pos);\n    };\n    Decoder.prototype.readU8 = function () {\n        var value = this.view.getUint8(this.pos);\n        this.pos++;\n        return value;\n    };\n    Decoder.prototype.readI8 = function () {\n        var value = this.view.getInt8(this.pos);\n        this.pos++;\n        return value;\n    };\n    Decoder.prototype.readU16 = function () {\n        var value = this.view.getUint16(this.pos);\n        this.pos += 2;\n        return value;\n    };\n    Decoder.prototype.readI16 = function () {\n        var value = this.view.getInt16(this.pos);\n        this.pos += 2;\n        return value;\n    };\n    Decoder.prototype.readU32 = function () {\n        var value = this.view.getUint32(this.pos);\n        this.pos += 4;\n        return value;\n    };\n    Decoder.prototype.readI32 = function () {\n        var value = this.view.getInt32(this.pos);\n        this.pos += 4;\n        return value;\n    };\n    Decoder.prototype.readU64 = function () {\n        var value = getUint64(this.view, this.pos);\n        this.pos += 8;\n        return value;\n    };\n    Decoder.prototype.readI64 = function () {\n        var value = getInt64(this.view, this.pos);\n        this.pos += 8;\n        return value;\n    };\n    Decoder.prototype.readF32 = function () {\n        var value = this.view.getFloat32(this.pos);\n        this.pos += 4;\n        return value;\n    };\n    Decoder.prototype.readF64 = function () {\n        var value = this.view.getFloat64(this.pos);\n        this.pos += 8;\n        return value;\n    };\n    return Decoder;\n}());\nexport { Decoder };\n//# sourceMappingURL=Decoder.mjs.map","import { Decoder } from \"./Decoder.mjs\";\nexport var defaultDecodeOptions = {};\n/**\n * It decodes a single MessagePack object in a buffer.\n *\n * This is a synchronous decoding function.\n * See other variants for asynchronous decoding: {@link decodeAsync()}, {@link decodeStream()}, or {@link decodeArrayStream()}.\n */\nexport function decode(buffer, options) {\n    if (options === void 0) { options = defaultDecodeOptions; }\n    var decoder = new Decoder(options.extensionCodec, options.context, options.maxStrLength, options.maxBinLength, options.maxArrayLength, options.maxMapLength, options.maxExtLength);\n    return decoder.decode(buffer);\n}\n/**\n * It decodes multiple MessagePack objects in a buffer.\n * This is corresponding to {@link decodeMultiStream()}.\n */\nexport function decodeMulti(buffer, options) {\n    if (options === void 0) { options = defaultDecodeOptions; }\n    var decoder = new Decoder(options.extensionCodec, options.context, options.maxStrLength, options.maxBinLength, options.maxArrayLength, options.maxMapLength, options.maxExtLength);\n    return decoder.decodeMulti(buffer);\n}\n//# sourceMappingURL=decode.mjs.map","// utility for whatwg streams\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nvar __await = (this && this.__await) || function (v) { return this instanceof __await ? (this.v = v, this) : new __await(v); }\nvar __asyncGenerator = (this && this.__asyncGenerator) || function (thisArg, _arguments, generator) {\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\n    function fulfill(value) { resume(\"next\", value); }\n    function reject(value) { resume(\"throw\", value); }\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\n};\nexport function isAsyncIterable(object) {\n    return object[Symbol.asyncIterator] != null;\n}\nfunction assertNonNull(value) {\n    if (value == null) {\n        throw new Error(\"Assertion Failure: value must not be null nor undefined\");\n    }\n}\nexport function asyncIterableFromStream(stream) {\n    return __asyncGenerator(this, arguments, function asyncIterableFromStream_1() {\n        var reader, _a, done, value;\n        return __generator(this, function (_b) {\n            switch (_b.label) {\n                case 0:\n                    reader = stream.getReader();\n                    _b.label = 1;\n                case 1:\n                    _b.trys.push([1, , 9, 10]);\n                    _b.label = 2;\n                case 2:\n                    if (!true) return [3 /*break*/, 8];\n                    return [4 /*yield*/, __await(reader.read())];\n                case 3:\n                    _a = _b.sent(), done = _a.done, value = _a.value;\n                    if (!done) return [3 /*break*/, 5];\n                    return [4 /*yield*/, __await(void 0)];\n                case 4: return [2 /*return*/, _b.sent()];\n                case 5:\n                    assertNonNull(value);\n                    return [4 /*yield*/, __await(value)];\n                case 6: return [4 /*yield*/, _b.sent()];\n                case 7:\n                    _b.sent();\n                    return [3 /*break*/, 2];\n                case 8: return [3 /*break*/, 10];\n                case 9:\n                    reader.releaseLock();\n                    return [7 /*endfinally*/];\n                case 10: return [2 /*return*/];\n            }\n        });\n    });\n}\nexport function ensureAsyncIterable(streamLike) {\n    if (isAsyncIterable(streamLike)) {\n        return streamLike;\n    }\n    else {\n        return asyncIterableFromStream(streamLike);\n    }\n}\n//# sourceMappingURL=stream.mjs.map","var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nimport { Decoder } from \"./Decoder.mjs\";\nimport { ensureAsyncIterable } from \"./utils/stream.mjs\";\nimport { defaultDecodeOptions } from \"./decode.mjs\";\nexport function decodeAsync(streamLike, options) {\n    if (options === void 0) { options = defaultDecodeOptions; }\n    return __awaiter(this, void 0, void 0, function () {\n        var stream, decoder;\n        return __generator(this, function (_a) {\n            stream = ensureAsyncIterable(streamLike);\n            decoder = new Decoder(options.extensionCodec, options.context, options.maxStrLength, options.maxBinLength, options.maxArrayLength, options.maxMapLength, options.maxExtLength);\n            return [2 /*return*/, decoder.decodeAsync(stream)];\n        });\n    });\n}\nexport function decodeArrayStream(streamLike, options) {\n    if (options === void 0) { options = defaultDecodeOptions; }\n    var stream = ensureAsyncIterable(streamLike);\n    var decoder = new Decoder(options.extensionCodec, options.context, options.maxStrLength, options.maxBinLength, options.maxArrayLength, options.maxMapLength, options.maxExtLength);\n    return decoder.decodeArrayStream(stream);\n}\nexport function decodeMultiStream(streamLike, options) {\n    if (options === void 0) { options = defaultDecodeOptions; }\n    var stream = ensureAsyncIterable(streamLike);\n    var decoder = new Decoder(options.extensionCodec, options.context, options.maxStrLength, options.maxBinLength, options.maxArrayLength, options.maxMapLength, options.maxExtLength);\n    return decoder.decodeStream(stream);\n}\n/**\n * @deprecated Use {@link decodeMultiStream()} instead.\n */\nexport function decodeStream(streamLike, options) {\n    if (options === void 0) { options = defaultDecodeOptions; }\n    return decodeMultiStream(streamLike, options);\n}\n//# sourceMappingURL=decodeAsync.mjs.map","// Main Functions:\nimport { encode } from \"./encode.mjs\";\nexport { encode };\nimport { decode, decodeMulti } from \"./decode.mjs\";\nexport { decode, decodeMulti };\nimport { decodeAsync, decodeArrayStream, decodeMultiStream, decodeStream } from \"./decodeAsync.mjs\";\nexport { decodeAsync, decodeArrayStream, decodeMultiStream, decodeStream };\nimport { Decoder, DataViewIndexOutOfBoundsError } from \"./Decoder.mjs\";\nimport { DecodeError } from \"./DecodeError.mjs\";\nexport { Decoder, DecodeError, DataViewIndexOutOfBoundsError };\nimport { Encoder } from \"./Encoder.mjs\";\nexport { Encoder };\n// Utilitiies for Extension Types:\nimport { ExtensionCodec } from \"./ExtensionCodec.mjs\";\nexport { ExtensionCodec };\nimport { ExtData } from \"./ExtData.mjs\";\nexport { ExtData };\nimport { EXT_TIMESTAMP, encodeDateToTimeSpec, encodeTimeSpecToTimestamp, decodeTimestampToTimeSpec, encodeTimestampExtension, decodeTimestampExtension, } from \"./timestamp.mjs\";\nexport { EXT_TIMESTAMP, encodeDateToTimeSpec, encodeTimeSpecToTimestamp, decodeTimestampToTimeSpec, encodeTimestampExtension, decodeTimestampExtension, };\n//# sourceMappingURL=index.mjs.map","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","\"use strict\";\n/**\n * Copyright (C) 2021 Landon Harris\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License as\n * published by the Free Software Foundation; version 2.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program. If not, see\n * <https://www.gnu.org/licenses/old-licenses/gpl-2.0-standalone.html>.\n*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ValueType = exports.ValTable = exports.SignalGroup = exports.SignalType = exports.Signal = exports.Node = exports.Message = exports.EnvironmentVariable = exports.Database = exports.DBCError = exports.AttributeDef = exports.Attribute = exports.decodeDb = exports.encodeDb = exports.extensionCodec = void 0;\nvar mapTools_1 = require(\"./mapTools\");\nObject.defineProperty(exports, \"extensionCodec\", { enumerable: true, get: function () { return mapTools_1.extensionCodec; } });\nObject.defineProperty(exports, \"encodeDb\", { enumerable: true, get: function () { return mapTools_1.encodeDb; } });\nObject.defineProperty(exports, \"decodeDb\", { enumerable: true, get: function () { return mapTools_1.decodeDb; } });\nvar attributes_1 = require(\"./dbc/attributes\");\nObject.defineProperty(exports, \"Attribute\", { enumerable: true, get: function () { return attributes_1.Attribute; } });\nObject.defineProperty(exports, \"AttributeDef\", { enumerable: true, get: function () { return attributes_1.AttributeDef; } });\nvar errors_1 = require(\"./dbc/errors\");\nObject.defineProperty(exports, \"DBCError\", { enumerable: true, get: function () { return errors_1.DBCError; } });\nvar db_1 = require(\"./dbc/db\");\nObject.defineProperty(exports, \"Database\", { enumerable: true, get: function () { return db_1.Database; } });\nvar ev_1 = require(\"./dbc/ev\");\nObject.defineProperty(exports, \"EnvironmentVariable\", { enumerable: true, get: function () { return ev_1.EnvironmentVariable; } });\nvar message_1 = require(\"./dbc/message\");\nObject.defineProperty(exports, \"Message\", { enumerable: true, get: function () { return message_1.Message; } });\nvar dbcNode_1 = require(\"./dbc/dbcNode\");\nObject.defineProperty(exports, \"Node\", { enumerable: true, get: function () { return dbcNode_1.Node; } });\nvar signal_1 = require(\"./dbc/signal\");\nObject.defineProperty(exports, \"Signal\", { enumerable: true, get: function () { return signal_1.Signal; } });\nObject.defineProperty(exports, \"SignalType\", { enumerable: true, get: function () { return signal_1.SignalType; } });\nObject.defineProperty(exports, \"SignalGroup\", { enumerable: true, get: function () { return signal_1.SignalGroup; } });\nvar valtable_1 = require(\"./dbc/valtable\");\nObject.defineProperty(exports, \"ValTable\", { enumerable: true, get: function () { return valtable_1.ValTable; } });\nObject.defineProperty(exports, \"ValueType\", { enumerable: true, get: function () { return valtable_1.ValueType; } });\n"],"names":[],"sourceRoot":""}